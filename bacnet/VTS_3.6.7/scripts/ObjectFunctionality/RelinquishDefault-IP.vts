  ;-------------------------------------------------------------------------------------
  ;  Relinquish Default Test
  ;
  ;  RelDefmmddyy.vts
  ;
  ;  Ver 0.1    03/08/01    P. Bowen    
  ;
  ;  Purpose: This test case verifies that the Present_Value property takes on the 
  ;    value of Relinquish_Default when all prioritized commands have been 
  ;    relinquished. This test applies to Analog Output, Analog Value, Binary Output,
  ;    Binary Value, Multi-state Output, and Multi-state Value objects that are 
  ;    commandable.
  ;
  ;  Dependencies: ReadProperty and WriteProperty Service Execution Tests
  ;
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------
  
  SETUP Relinquish Default Test
  INCLUDE "..\config.vts"

  OBJECT1 = analog-value, 1
  TESTVAL1 = 99.9

  ;-------------------------------------------------------------------------------------

  SECTION Relinquish Default Test

  -- Note: this test takes place over steps #1a - #1d so that the test can be paused
  -- between steps to verify the values of the Priority-Array and Relinquish-Default
  -- properties.

  -- Configuration Requirements: 
  --    a) The object to be tested shall be configured such that all slots in the 
  --       Priority_Array have a value of NULL and no internal algorithms are issuing
  --       prioritized commands to this object. 
  --    b) IUT is on the same network as TD

  -- Test Concept: A pre-requisite to this test is that an object has been provided
  --    for which all prioritized commands have been relinquished and any minimum 
  --    on/off time has been accounted for. The Present_Value is compared to the value
  --    of Relinquish_Default to ensure that they are the same. If possible, the value
  --    of Relinquish_Default is changed to verify that Present_Value tracks the changes.

  -- Test Steps:
  --
  --    1. VERIFY Priority_Array = (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
  --        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)
  --    2. TRANSMIT ReadProperty-Request,
  --        'Object Identifier' =    (the object being tested),
  --        'Property Identifier' =    Present_Value
  --    3. RECEIVE ReadProperty-ACK,
  --        'Object Identifier' =    (the object being tested),
  --        'Property Identifier' =    Present_Value
  --        'Property Value' =    (any valid value, X)
  --    4. VERIFY Relinquish_Default = X
  --    5. IF (Relinquish_Default is writable) THEN
  --        WRITE Relinquish_Default = (any valid value, Y, other than the one
  --        returned in step 4)
  --    6. VERIFY Present_Value = Y

  -- REFERENCE (B) Relinquish_Default and (T) Relinquish Default Test

  ;-------------------------------------------------------------------------------------
  TEST #1a Relinquish Default Test, Steps 1 - 3

  -- Verify Priority Array and Read Present-Value

  DEPENDENCIES None

  -- Step #1: Verify (read) the object's Priority-Array

    SEND (
          DA = IUT_ADDR
          PDU = Confirmed-Request
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Priority-Array
    )

    EXPECT (
          SA = IUT_ADDR
          PDU = ComplexAck
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Priority-Array
          OpenTag 3
             AL = {Priority-Array}
          CloseTag 3
    )

  -- Steps #2 and #3: Read the object's Present-Value property

    SEND (
          DA = IUT_ADDR
          PDU = Confirmed-Request
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Present-Value
    )

    EXPECT (
          SA = IUT_ADDR
          PDU = ComplexAck
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Present-Value
          OpenTag 3
             AL = {Present-Value}
          CloseTag 3
    )

  ;-------------------------------------------------------------------------------------
  TEST #1b Relinquish Default Test, Step 4

  -- Verify that Relinquish-Default = Present-Value

  DEPENDENCIES None

 -- Step #4: Verify that the Relinquish-Default property = Present-Value

    SEND (
          DA = IUT_ADDR
          PDU = Confirmed-Request
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Relinquish-Default
    )

    EXPECT (
          SA = IUT_ADDR
          PDU = ComplexAck
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Relinquish-Default
          OpenTag 3
             AL = {Relinquish-Default}
         CloseTag 3
    )

  ;-------------------------------------------------------------------------------------
  TEST #1c Relinquish Default Test, Step 5

  -- Write new Relinquish-Default (= Y, different from Present-Value in step #4)
  -- and verify that Present-Value now = Y

  DEPENDENCIES None

  -- Step #5: Write new Relinquish-Default value

    SEND (
          DA = IUT_ADDR
          PDU = Confirmed-Request
          Service = WriteProperty
          Object = 0, OBJECT1
          Property = 1, Relinquish-Default
          OpenTag 3
            REAL = TESTVAL1    
          CloseTag 3
    )

    EXPECT (
          SA = IUT_ADDR
          PDU = SimpleAck
          Service = WriteProperty
    )

  ;-------------------------------------------------------------------------------------
  TEST #1d Relinquish Default Test, Step 6

  -- Verify that Present-Value = Relinquish-Default

  DEPENDENCIES None

  -- Step #6: Verify that Present-Value equals the new Relinquish-Default value

    SEND (
          DA = IUT_ADDR
          PDU = Confirmed-Request
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Present-Value
    )

    EXPECT (
          SA = IUT_ADDR
          PDU = ComplexAck
          Service = ReadProperty
          Object = 0, OBJECT1
          Property = 1, Present-Value
          OpenTag 3
             REAL = TESTVAL1
          CloseTag 3
    )
 
