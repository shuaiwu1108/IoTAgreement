  ;-------------------------------------------------------------------------------------
  ;  Positive SubscribeCOV Service Execution Tests
  ;	Updating Existing Subscriptions Test Case
  ;
  ; UpdateExistSubs.vts		UpExSubsddmmyy.vts
  ;
  ;  Ver 0.1   06/02/01    P. Bowen	Initial version (untested)
  ;
  ;  Purpose: This test case verifies that the IUT correctly responds
  ;	to a SubscribeCOV request to update the lifetime of a subscription.
  ;	Either confirmed or unconfirmed notifications may be used but at 
  ;	least one of these options must be supported by the IUT.
  ;  
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------
  
  SETUP Updating Existing Subscriptions Test Case

  ;-------------------------------------------------------------------------------------
  ;
  ; TD_CONFIG
  ;

  TD_IP = 10.10.10.36
  
  OBJECT1 = Analog-Value, 1	; Object which is the subject of the COV tests

  PID = 70			; Subscriber Process Identifier
  LIFETIME1 = 60		; First subscription lifetime in seconds
  LIFETIME2 = 240		; Second subscription lifetime in seconds

  ;-------------------------------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  
  --IUT_IP = 10.10.10.100
  IUT_IP = 208.6.162.35

  ;-------------------------------------------------------------------------------------
 
   SECTION Updating Existing Subscriptions Test Case

  -- This test takes place across test #1a - #1d so the TD can be manually paused
  -- between tests. This is necessary since a time delay is needed in this test 
  -- sequence and VTS currently doesn't give us a means for doing this within the 
  -- script.

  -- Configuration Requirements: The IUT shall be configured with at least one
  -- object that supports subscriptions for COV notifications.

  -- Test Concept: A subscription for COV notifications is made for 60 seconds.
  -- Before that subscription has expired a second subscription is made for 300
  -- seconds. When the notification is sent in response to the second 
  -- subscription the lifetime is checked to verify that it is greater than 60
  -- but less than 300 seconds.

  -- Test Steps:
  -- 1.	TRANSMIT SubscribeCOV-Request,
  --	'Subscriber Process Identifier' = (any valid process identifier),
  --	'Monitored Object Identifier' =	(any object supporting COV notifications),
  --	'Issue Confirmed Notifications' = TRUE | FALSE,
  --	'Lifetime' = 60
  -- 2.	RECEIVE BACnet-SimpleACK-PDU
  -- 3.	WAIT Notification Fail Time
  -- 4.	IF (the subscription was for confirmed notifications) THEN
  --	  RECEIVE BACnetConfirmedCOVNotification-Request,
  --		'Subscriber Process Identifier' = (the same identifier used in
  --			the subscription),
  --		'Initiating Device Identifier' = IUT,
  --		'Monitored Object Identifier' =	(the same object used in the
  --			subscription),
  --		'Time Remaining' = 60,
  --		'List of Values' = (values appropriate to the object type of 
  --			the monitored object)
  --	ELSE
  --	  RECEIVE BACnetUnconfirmedCOVNotification-Request,
  --		'Subscriber Process Identifier' = (the same identifier used in
  --			the subscription),
  --		'Monitored Object Identifier' =	(the same object used in the
  --			subscription),
  --		'Time Remaining' = 60,
  --		'List of Values' = (values appropriate to the object type of 
  --			the monitored object)
  -- 5.	TRANSMIT SubscribeCOV-Request,
  --		'Subscriber Process Identifier' = (any valid process identifier),
  --		'Monitored Object Identifier' =	(any object supporting COV
  --			notifications),
  --		'Issue Confirmed Notifications' = TRUE | FALSE,
  --		'Lifetime' = (a value between 180 and 300 seconds)
  -- 6.	RECEIVE BACnet-SimpleACK-PDU
  -- 7.	WAIT Notification Fail Time
  -- 8.	IF (the subscription was for confirmed notifications) THEN
  --	  RECEIVE BACnetConfirmedCOVNotification-Request,
  --		'Subscriber Process Identifier' = (the same identifier used in
  --			the subscription),
  --		'Initiating Device Identifier' = IUT,
  --		'Monitored Object Identifier' =	(the same object used in the
  --			subscription),
  --		'Time Remaining' = (the requested subscription lifetime),
  --		'List of Values' = (values appropriate to the object type of 
  --			the monitored object)
  --	ELSE
  --	  RECEIVE BACnetUnconfirmedCOVNotification-Request,
  --		'Subscriber Process Identifier' = (the same identifier used in
  --			the subscription),
  --		'Initiating Device Identifier' = IUT,
  --		'Monitored Object Identifier' =	(the same object used in the
  --			subscription),
  --		'Time Remaining' = (the requested subscription lifetime),
  --		'List of Values' = (values appropriate to the object type of
  --			the monitored object)

  ;-------------------------------------------------------------------------------------
  TEST #1a Subscribe to COV with lifetime = LIFETIME1 secs

  DEPENDENCIES None

  REFERENCE (B) SubscribeCOV Service and (T) Positive SubscribeCOV Service Execution Tests

  -- Step #1: Subscribe to COV with lifetime = LIFETIME1 secs

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = SubscribeCOV
      Unsigned = 0, PID			; Process-Identifier = PID
      Object = 1, OBJECT1		; Object-Identifier = OBJECT1
      Boolean = 2, TRUE			; Request confirmed notifications
      Unsigned = 3, LIFETIME1		; Subscribe for LIFETIME seconds
    )

  -- Step #2:  Receive Simple ACK

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #3: Wait Notification Fail Time

  ;-------------------------------------------------------------------------------------
  TEST #1b Receive Confirmed COV Notification Request

  -- Step #4: Receive Confirmed COV Notification Request

  EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      Service = ConfirmedCOVNotification
  )

  ;-------------------------------------------------------------------------------------
  TEST #1c Subscribe to COV with lifetime = LIFETIME2 secs

   -- Step #5: Subscribe to COV with lifetime = LIFETIME2 secs

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = SubscribeCOV
      Unsigned = 0, PID			; Process-Identifier = PID
      Object = 1, OBJECT1		; Object-Identifier = OBJECT1
      Boolean = 2, TRUE			; Request confirmed notifications
      Unsigned = 3, LIFETIME2		; Subscribe for LIFETIME seconds
    )

  -- Step #6: Receive Simple ACK

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #7: Wait Notification Fail Time

  ;-------------------------------------------------------------------------------------
  TEST #1d Receive Confirmed COV Notification Request

  -- Step #8: Receive Confirmed COV Notification Request

  EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      Service = ConfirmedCOVNotification
  )