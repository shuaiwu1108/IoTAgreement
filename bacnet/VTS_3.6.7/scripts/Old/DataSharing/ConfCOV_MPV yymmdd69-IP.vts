  ;-------------------------------------------------------------------------------------
  ;  Confirmed Change of Value (COV) Notification Service Initiation Tests
  ;	COV Notification from a Multi-state Input, Multi-state Output, and 
  ;	Multi-state Value Object Present Value Property
  ;
  ;  ConfirmedCOV_MPV.vts	CoCOVddmmyy-05.vts
  ;
  ;  Ver 0.1	03/23/01	P. Bowen	Initial untested version (no MI/MO/MV objects to test)
  ;  Ver 0.2	05/27/01	P. Bowen	Make LIFETIME = 0 secs
  ;
  ;  Purpose: This test case verifies that the IUT can initiate ConfirmedCOVNotification
  ;	service requests conveying a change of the Present_Value property of Multi-state
  ;	Input, Multi-state Output, and Multi-state Value objects.
  ;  
  ;  Note: the following tests should be executed before running this test:
  ;	ReadProperty Service Execution Tests
  ;	WriteProperty Service Execution Tests
  ;
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------
  
  SETUP Confirmed COV Notification Test - Multi-state Object Present Value Property

  ;-------------------------------------------------------------------------------------
  ;
  ; TD_CONFIG
  ;
  
   TD_IP = 10.10.10.36 

  OBJECT1 = Multistate-Value, 1	; Object which is the subject of the COV tests
  
  PID = 14			; Subscriber Process Identifier
  LIFETIME = 0			; Subscription lifetime in secs (0 = indefinite)
  WRITE_PRIORITY = 1		; Priority for writing changes
  MSTATE_VALUE = 3		; a new PV state which differs from the default

  ;-------------------------------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  IUT_IP = 208.6.162.35
  
  INVOKEID_1 = 0		; InvokeID for first confirmed COV notification
  INVOKEID_2 = 1		; InvokeID for second confirmed COV notification
  INVOKEID_3 = 2		; InvokeID for third confirmed COV notification
	                            
  ;-------------------------------------------------------------------------------------
 
   SECTION Confirmed COV Notification Test - Multi-state Object Present Value Property

  -- This test takes place across test steps #1a - #1g so the TD can be manually 
  -- paused between tests. This is necessary since the COV Notifications must be 
  -- verified manually.

  -- Configuration Requirements: At the beginning of the test, the Out-Of-Service 
  -- property shall have a value of FALSE.

  -- Test Concept: A subscription for COV notifications is established. The Present
  --	Value of the monitored object is changed and a notification shall be received.
  --	The Present Value may be changed using the WriteProperty service or by another
  --	means such as changing the input signal represented by a Multi-state Input object. For some implementations it may be necessary to write to the Out_Of_Service property first to accomplish this task. For implementations where it is not possible to write to these properties at all the vendor shall provide an alternative trigger mechanism to accomplish this task. All of these methods are equally acceptable.

  -- Test Steps:
  --	REPEAT X = (one supported object of each type from the set Multi-state Input,
  --	Multi-state Output, and Multi-state Value) DO {
  --	1. TRANSMIT SubscribeCOV-Request,
  --		'Subscriber Process Identifier' = (any value > 0 chosen by the TD),
  --		'Monitored Object Identifier' =	X,
  --		'Issue Confirmed Notifications' = TRUE,
  --		'Lifetime' = 0
  --	2. RECEIVE BACnet-SimpleACK-PDU
  --	3. RECEIVE ConfirmedCOVNotification-Request,
  --		'Subscriber Process Identifier' = (the same value used in step 1),
  --		'Initiating Device Identifier' = IUT,
  --		'Monitored Object Identifier' =	X,
  --		'Time Remaining' = 0,
  --		'List of Values' = (the initial Present_Value and initial Status_Flags)
  --	4. TRANSMIT BACnet-SimpleACK-PDU
  --	5. IF (Out_Of_Service is writable) THEN
  --		WRITE X, Out_Of_Service = TRUE
  --		RECEIVE BACnet-SimpleACK-PDU
  --	6. BEFORE Notification Fail Time
  --		RECEIVE ConfirmedCOVNotification-Request,
  --			'Subscriber Process Identifier' = (the same value used in step 1),
  --			'Initiating Device Identifier' = IUT,
  --			'Monitored Object Identifier' =	X,
  --			'Time Remaining' = 0,
  --			'List of Values' = (the initial Present_Value and the new Status_Flags)
  --	7. TRANSMIT BACnet-SimpleACK-PDU
  --	8. IF (Present_Value is now writable) THEN
  --		WRITE X, Present_Value = (any value that differs from "initial value")
  --		RECEIVE BACnet-SimpleACK-PDU
  --	   ELSE	MAKE (Present_Value  = any value that differs from "initial value")
  --	9. BEFORE  NotificationFailTime
  --		RECEIVE ConfirmedCOVNotification-Request,
  --			'Subscriber Process Identifier' = (the same value used in step 1),
  --			'Initiating Device Identifier' = IUT,
  --			'Monitored Object Identifier' =	X,
  --			'Time Remaining' = 0,
  --			'List of Values' = (the new Present_Value and new Status_Flags)
  --	10. TRANSMIT BACnet-SimpleACK-PDU
  --	11. TRANSMIT SubscribeCOV-Request,
  --		'Subscriber Process Identifier' = (the same value used in step 1),
  --		'Monitored Object Identifier' =	X
  --	12. RECEIVE BACnet-SimpleACK-PDU
  --	13. IF (Out_Of_Service is writable) THEN
  --		WRITE X, Out_Of_Service = FALSE
  --		RECEIVE BACnet-SimpleACK-PDU
  --	}

  ;-------------------------------------------------------------------------------------
  TEST #1a Subscribe to COV and Receive Confirmed COV Notification

  DEPENDENCIES None

  REFERENCE (B) Confirmed COV Notification Service and (T) Confirmed COV Notification Test - MI/MO/MV PV Property

  -- Step #1 - 2: Subscribe to COV and Receive Simple ACK

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = SubscribeCOV
      Unsigned = 0, PID			; Process-Identifier = PID
      Object = 1, OBJECT1		; Object-Identifier = OBJECT1
      Boolean = 2, TRUE			; Request confirmed notifications
      Unsigned = 3, LIFETIME		; Subscribe for LIFETIME seconds
    )

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #3: Receive COV Notification Request

  --  AND (				; Can't control the timing of the IUT's
  --    NETWORK = NET_1			; COV Notification Request so TD can't
  --    DER = FALSE			; use this EXPECT statement
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )

 ;-------------------------------------------------------------------------------------
  TEST #1b Acknowledge COV Notification Request based on SubscribeCOV Request

  DEPENDENCIES None

  -- Step #4: Transmit Simple ACK

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      PDU = SimpleAck
      InvokeID = INVOKEID_1
      Service = ConfirmedCOVNotification
    )

  ;-------------------------------------------------------------------------------------
  TEST #1c Make Out-of-Service = TRUE and Receive COV Notification Request

  DEPENDENCIES None

  -- Step #5: Make Out-of-Service = TRUE and Receive Simple ACK

   SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
        BOOLEAN = TRUE			; Make Out-of-Service = TRUE
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY	; Set Out-of-Service write priority
    )

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step 6: Before NotificationFailTime Receive COV Notification Request

  --  AND (				; Can't control the timing of the IUT's
  --    NETWORK = NET_1			; COV Notification Request so TD can't
  --    DER = FALSE			; use this EXPECT statement
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )

 ;-------------------------------------------------------------------------------------
  TEST #1d Acknowledge COV Notification Request

  DEPENDENCIES None

  -- Step #7: Transmit Simple ACK

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      PDU = SimpleAck
      InvokeID = INVOKEID_2
      Service = ConfirmedCOVNotification
    )

  ;-------------------------------------------------------------------------------------
  TEST #1e  Make PV = any value that differs from Initial Value 

  DEPENDENCIES None

  -- Step #8: PV = any value that differs from initial value

   SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        Unsigned = MSTATE_VALUE		; One of N states, N is defined in EPICS
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY	; Set PV write priority
    )

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Steps #9: Before Notification Fail Time Receive COV Notification Request

  --  AND (				; Can't control the timing of the IUT's
  --    NETWORK = NET_1			; COV Notification Request so TD can't
  --    DER = FALSE			; use this EXPECT statement
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )
  
  ;-------------------------------------------------------------------------------------
  TEST #1f Acknowledge COV Notification Request

  DEPENDENCIES None

  -- Step #10: Transmit Simple ACK

    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      PDU = SimpleAck
      InvokeID = INVOKEID_3
      Service = ConfirmedCOVNotification
    )

  ;-------------------------------------------------------------------------------------
  TEST #1g Send Unsubscribe COV Request and Make Out-of-Service = FALSE

  DEPENDENCIES None

  -- Steps #11 & 12: Send Unsubscribe COV Request to IUT and Receive Simple ACK
  
    SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = SubscribeCOV		; Cancel COV Subscription request
      Unsigned = 0, PID			; Process-Identifier = PID
      Object = 1, OBJECT1		; Object-Identifier = OBJECT1
    )

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #13: Return point to service (make Out-of-Service = FALSE) 

   SEND (
      NETWORK = "Untitled"
      Da = IUT_IP
      Der = TRUE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InVokeID = 1
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
         BOOLEAN = FALSE		; Make Out-of-Service = FALSE (back in service)
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY	; Set Out-of-Service write priority
    )

    EXPECT (
      NETWORK = "Untitled"
      Sa = IUT_IP
      Der = FALSE
      BVLCI = ORIGINAL-UNICAST-NPDU      
      PDU = SimpleAck
      Service = WriteProperty
    )