;-----------------------------------------------------------------------------
 SETUP ReadPropertyMultiple Service Execution Tests
  
  DIP = 10.10.10.100:0xBAC0
  
  OBJECT1 = Device, 1967	; DEVICE OBJECT
  OBJECT2 = analog-VALUE, 1	; Object which is the subject of the Read Prop tests
  OBJECT3 = analog-VALUE, 2	; Object which is the subject of the Read Prop tests
  OBJECT4 = File, 104		; Object which is the subject of the Read Prop tests

  INDEX0 = 0		; Index used in any test to read array length
  INDEX1 = 1		; Array index for test #1g "Read a Single Element of an Array"
  INDEX2 = 4		; Array index for test #1j "Read Property - Read Null Values"

;-----------------------------------------------------------------------------

 SECTION ReadPropertyMultiple Service Execution Tests

;----------------------------------------------------------------------------

;-------------------------------------------------------------------------------------
  TEST #1a Reading a Single Property from a Single Object 

  -- Purpose: This test case verifies the ability to read a single property from a
  -- single object.

  -- Test Concept: A single supported property is read from the Device object. The 
  -- property is selected by the TD and is designated as P1 in the test description.

  -- Test Steps:
  --  1. TRANSMIT ReadPropertyMultiple-Request,
  --	'Object Identifier' = Object1 | Object2, 'Property Identifier' = P1
  --  2. RECEIVE ReadPropertyMultiple-ACK,
  --	'Object Identifier' = (the object selected in step 1), 'Property Identifier' = P1,
  --	'Property Value' = (the value of P1 specified in the EPICS)

  DEPENDENCIES None

  REFERENCE (B) ReadPropertyMultiple Service and (T) Reading a Single Property of a Single Object

  -- Step #1: Send ReadPropertyMultiple request for a single property, single object

    SEND (
      NETWORK = "Untitled"
      Da = DIP
      BVLCI=ORIGINAL-UNICAST-NPDU
      DER = TRUE
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 1
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Name
      CloseTag 1
    )

  -- Step #2: Receive ReadPropertyMultiple ACK

    EXPECT (
      NETWORK = "Untitled"
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
           AL = {Object-Name}
         CloseTag 4
      CloseTag 1
    )

;-------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------

  TEST #1b Reading Multiple properties from a Single Object.

  -- Purpose: This test case verifies the ability to read multiple properties from a
  --	single object.

  -- Test Steps:
  --  1. TRANSMIT ReadPropertyMultiple-Request,
  --	'Object Identifier' = Object1 | Object2, 'Property Identifier' = P1, 'Property 
  --		Identifier' = P2, 'Property Identifier' = P3
  --  2. RECEIVE ReadPropertyMultiple-ACK,
  --	'Object Identifier' = (the object selected in step 1), 'Property Identifier' = P1,
  --	'Property Value' = (the value of P1 specified in the EPICS), 'Property Identifier' = P2,
  --	'Property Value' = (the value of P2 specified in the EPICS), 'Property Identifier' = P3,
  --	'Property Value' = (the value of P3 specified in the EPICS)

  DEPENDENCIES None

  REFERENCE (B) ReadPropertyMultiple Service and (T) Reading Multiple properties from a Single Object

  -- Step #1: Send ReadPropertyMultiple request for multiple properties, single object

    SEND (
      NETWORK = "Untitled"
      Da = DIP
      BVLCI=ORIGINAL-UNICAST-NPDU
      DER = TRUE
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 2
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Name
         Property = 0, Vendor-Name
         Property = 0, Model-Name  
         CloseTag 1
    )

  -- Step #2: Receive ReadPropertyMultiple ACK

    EXPECT (
      NETWORK = "Untitled"
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
            AL = {Object-Name}
         CloseTag 4
         Property = 2, Vendor-Name
         OpenTag 4
            AL = {Vendor-Name}
         CloseTag 4
         Property = 2, Model-Name
         OpenTag 4
            AL = {Model-Name}
         CloseTag 4
      CloseTag 1
    )

;-------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------
  TEST #1c Reading a Single Property from Multiple Objects

  -- Purpose: This test case verifies the ability to read a single property from 
  --	multiple objects.

  -- Test Steps:
  --  1. TRANSMIT ReadPropertyMultiple-Request,
  --	'Object Identifier' = Object1, 'Property Identifier' = P1,
  --	'Object Identifier' = Object2, 'Property Identifier' = P2
  --  2. RECEIVE ReadPropertyMultiple-ACK,
  --	'Object Identifier' = Object1, 'Property Identifier' = P1, 'Property Value' =
  --		(the value of P1 specified in the EPICS),
  --	'Object Identifier' = Object2, 'Property Identifier' = P2, 'Property Value' =
  --		(the value of P2 specified in the EPICS)

  DEPENDENCIES None

  REFERENCE (B) ReadPropertyMultiple Service and (T) Reading a Single Property from Multiple Objects
   
  -- Step #1: Send ReadPropertyMultiple request to multiple objects, single property

    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp =1476
      InvokeID = 3
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Name
      CloseTag 1
      Object = 0, OBJECT2
      OpenTag 1
         Property = 0, Object-Name
      CloseTag 1
    )

  -- Step #2: Receive ReadPropertyMultiple ACK

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
            AL = {Object-Name}
         CloseTag 4
      CloseTag 1

      Object = 0, OBJECT2
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
            AL = {Object-Name}
         CloseTag 4
      CloseTag 1
    )

;-------------------------------------------------------------------------------------
;----------------------------------------------------------------------------
  TEST #1d Reading Multiple Properties from Multiple Objects

  -- Purpose: This test case verifies the ability to read multiple properties from 
  --	multiple objects.

  -- Test Steps:
  --  1. TRANSMIT ReadPropertyMultiple-Request,
  --	'Object Identifier' = Object1,
  --	'Property Identifier' = P1, 'Property Identifier' = P2, 'Property Identifier' =	P3,
  --	'Object Identifier' = Object2,
  --	'Property Identifier' = P4, 'Property Identifier' = P5,	'Property Identifier' =	P6,
  --  2. RECEIVE ReadPropertyMultiple-ACK,
  --	'Object Identifier' = Object1,
  --	'Property Identifier' =	P1, 'Property Value' = (the value of P1 specified in the EPICS),
  --	'Property Identifier' =	P2, 'Property Value' = (the value of P2 specified in the EPICS),
  --	'Property Identifier' =	P3, 'Property Value' = (the value of P3 specified in the EPICS),
  --	'Object Identifier' = Object2,
  --	'Property Identifier' =	P4, 'Property Value' = (the value of P4 specified in the EPICS),
  --	'Property Identifier' =	P5, 'Property Value' = (the value of P5 specified in the EPICS),
  --	'Property Identifier' =	P6, 'Property Value' = (the value of P6 specified in the EPICS)

  DEPENDENCIES None

  REFERENCE (B) ReadPropertyMultiple Service and (T) Reading Multiple Properties from Multiple Objects
   
  -- Step #1: Send ReadPropertyMultiple request for multiple properties, multiple objects
    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp =1476
      InvokeID = 4
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Name
         Property = 0, Object-Type
         Property = 0, Object-Identifier
      CloseTag 1
      Object = 0, OBJECT2
      OpenTag 1
         Property = 0, Object-Name
         Property = 0, Object-Type
         Property = 0, Object-Identifier
      CloseTag 1      
      
    )

  -- Step #2: Receive ReadPropertyMultiple ACK

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
            AL = {Object-Name}
         CloseTag 4
         Property = 2, Object-Type
         OpenTag 4
            AL = {Object-Type}
         CloseTag 4
         Property = 2, Object-Identifier
         OpenTag 4
            AL = {Object-Identifier}
         CloseTag 4
      CloseTag 1

      Object = 0, OBJECT2
      OpenTag 1
         Property = 2, Object-Name
         OpenTag 4
            AL = {Object-Name}
         CloseTag 4
         Property = 2, Object-Type
         OpenTag 4
            AL = {Object-Type}
         CloseTag 4
         Property = 2, Object-Identifier
         OpenTag 4
            AL = {Object-Identifier}
         CloseTag 4

      CloseTag 1
    )

;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

  TEST #1e - Read Property Multiple, Type Object Identifier

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type BACnetObjectIdentifier.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type BACnetObjectIdentifier)
 
  -- Passing Result: The IUT shall respond as indicated conveying the value 
  -- specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading Object Identifiers

    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 5
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Identifier	; BACnetObjectIdentifier
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Identifier
         OpenTag 4
            AL = {Object-Identifier}
         CloseTag 4
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

  TEST #1f - Read Property Multiple, Type Enumerated

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Enumerated.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type Enumerated)
 
  -- Passing Result: The IUT shall respond as indicated conveying the value 
  -- specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading Enumerated Values

    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 6
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-Type
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-Type
         OpenTag 4
            AL = {Object-Type}
         CloseTag 4
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

  TEST #1g - Read Property Multiple, Type CharacterString

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type CharacterString.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type CharacterString)
 
  -- Passing Result: The IUT shall respond as indicated conveying the value 
  -- specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading CharacterString Values

    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 7
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Description
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Description
         OpenTag 4
            AL = {Description}
         CloseTag 4
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------

  TEST #1h - Read Property Multiple, Type Unsigned

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Unsigned.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type Unsigned)
 
  -- Passing Result: The IUT shall respond as indicated conveying the value 
  -- specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading Unsigned Values
    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 8
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Vendor-Identifier	; Vendor-Identifier is of type Unsigned
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Vendor-Identifier
         OpenTag 4
            AL = {Vendor-Identifier}
         CloseTag 4
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
TEST #1i - Read Property Multiple, Read an Entire Array

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Entire Array.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type Entire Array)
 
  -- Passing Result: The IUT shall respond as indicated conveying values specified
  -- in the EPICS. If segmentation is not supported and the object list is too long
  -- to return without segmentation an abort message indicating "segmentation not
  -- supported" is a passing result. If an abort message is received and the IUT
  -- has another array that is small enough to read in its entirety without 
  -- segmentation, then this test shall be repeated using that array. A passing 
  -- result in that case is that the entire array is returned in response to the 
  -- ReadPropertyMultiple request.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading an Entire Array

    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 9
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Priority-Array		; HARDCODE Read entire Object-List array
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
     BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = error
     Error-choice = ReadPropertyMultiple
     Enum = 2         
     Enum = 32

    )
  ;-------------------------------------------------------------------------------------
  ;-------------------------------------------------------------------------------------
  ; Note: This test commented out since VTS doesn't recognize the array index reference
  ;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------
 TEST #1j - MANAUL Read Property Multiple, Read the Size of an Array

--   Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
--   service requests when the requested property is of type Array and the length of
--   the array is read.

--   Test Steps:
--  	1. VERIFY (Object, X), property value = (the array length)
 
--  Passing Result: The IUT shall respond as indicated conveying the array length 
--   as specified in the EPICS. 
  
  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading the Size of an Array
    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 10
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 0, Object-List
	 Unsigned = 1, INDEX0
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-List
	 Unsigned = 3, INDEX0			; get "unrecognized packet keyword" error
         OpenTag 4
            AL = {Object-List}
         CloseTag 4
      CloseTag 1     
    )

;-------------------------------------------------------------------------------------
 
 TEST #1k - MANAUL Read Property Multiple, Read a Single Element of an Array

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Array and a single element
  -- of the array is read.
  
  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (the value of the Yth element of 
  -- the array)
 
 -- Passing Result: The IUT shall respond as indicated conveying the value of the 
  -- Yth element as specified in the EPICS.
  
DEPENDENCIES None

REFERENCE (B) ReadProperty Service and (T) Reading a Single Element of an Array
    SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 11
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
        Property = 0, Object-List            
        Unsigned = 1,INDEX1			
        CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
         Property = 2, Object-List            
        Unsigned = 3, INDEX1			
        OpenTag 4
           AL = {Object-List}               
         CloseTag 4
      CloseTag 1
    )

;-------------------------------------------------------------------------------------
  TEST #1l - Read Property Multiple, Type Bitstring

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Bitstring.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any value of type Bitstring)
 
  -- Passing Result: The IUT shall respond as indicated conveying the value of
  -- the bitstring as specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) Reading Bitstring Values   
  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 12
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 0, Status-Flags
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 2,Status-Flags
       OpenTag 4
        AL = {Status-Flags}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
 ;-------------------------------------------------------------------------------------

  TEST #1m - Read Property Multiple, Read an Entire List

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type List and the value read
  -- is an entire list.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (an entire list)
 
 -- Passing Result: The IUT shall respond as indicated conveying the values in the
  -- list as specified in the EPICS.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) TBD
  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 13
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 0, Device-Address-Binding     ; MANUAL
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 2,Device-Address-Binding
       OpenTag 4
--        AL = {Device-Address-Binding}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------

  TEST #1o - Read Property Multiple, Type Boolean

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Boolean. 

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (one of either TRUE or FALSE)
 
  -- Passing Result: The IUT shall respond with the value of either TRUE or FALSE.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) TBD

  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 15
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 0, OUT-OF-SERVICE	    ; HARDCODE Optional property of type Boolean
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 2,OUT-OF-SERVICE
       OpenTag 4
        AL = {OUT-OF-SERVICE}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
TEST #1p - Read Property Multiple, Type Signed--Verified by Manual  test

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Signed. 

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any valid Signed value)
 
  -- Passing Result: Passing Result: The IUT shall respond with a valid Signed value.

  DEPENDENCIES None
  REFERENCE (B) ReadProperty Service and (T) TBD

  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 16
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 0, Utc-Offset
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 2,Utc-Offset
       OpenTag 4
        AL = {Utc-Offset}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
  TEST #1q - Read Property Multiple, Type Real

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Real.

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any valid Real value)
 
  -- Passing Result: The IUT shall respond with any valid value of type Real.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) TBD

  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 17
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 0, Present-Value
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT2
      OpenTag 1
       Property = 2,Present-Value
       OpenTag 4
        AL = {Present-Value}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

  TEST #1r - Read Property Multiple, Type Time

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Time. 

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any valid Time value)
 
  -- Passing Result: The IUT shall respond with any valid value of type Time.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) TBD

  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 18
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 0, Local-Time
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 2,Local-Time
       OpenTag 4
        AL = {Local-Time}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------

  TEST #1s - Read Property Multiple, Type Date

  -- Purpose: This test case verifies that the IUT can execute ReadPropertyMultiple
  -- service requests when the requested property is of type Date. 

  -- Test Steps:
  --	1. VERIFY (Object, X), property value = (any valid Date value)
 
  -- Passing Result: The IUT shall respond with any valid value of type Date.

  DEPENDENCIES None

  REFERENCE (B) ReadProperty Service and (T) TBD

  
   SEND (
      NETWORK = "Untitled"
      DER = TRUE
      Da = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = Confirmed-Request
      SegMsg = 0
      SegResp = 0
      MaxResp = 1476
      InvokeID = 19
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 0, Local-Date
      CloseTag 1
    )

    EXPECT (
      NETWORK = "Untitled"
      DER = FALSE
      Sa = DIP
      BVLCI = ORIGINAL-UNICAST-NPDU
      PDU = ComplexAck
      Service = ReadPropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
       Property = 2,Local-Date
       OpenTag 4
        AL = {Local-Date}
       CloseTag 4 
      CloseTag 1
    )
 ;-------------------------------------------------------------------------------------
