  ;--------------------------------------------------------------
  ; Testing Support for COMMAND_FAILURE Test
  ;
  ; Unevnt05mmddyy.vts
  ; 
  ;   Ver 0.0   01/30/01	Anthony Makela	Initial version
  ;   Ver 0.1	05/28/01	P. Bowen	Changed confirmed to unconfirmed
  ;						event notification service and
  ;						updated documentation as required
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------

  SETUP CommandFailure

  ;--------------------------------------------------------------
    IUT_IP = 10.10.10.100
  
  ;--------------------------------------------------------------
  ;
  ; TD_CONFIG
  ;
  ;"Untitled" = 1, ETHERNET, 0
  -- The network which is directly-connected to the TD
  -- and can be used to reach the IUT.
  -- Adjust the parameters as needed to reflect the actual
  -- physical environment. The first value represents the 
  -- physical network number, the second value the physical 
  -- network type and the third value the physical port.

  ;MY_MAC = 00d0b77347fc    -- MAC address of the TD
                           -- replace with your TD address

  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2000            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  ;IUT_IP = 0040ae000e65   -- MAC address of IUT
                           -- replace with your IUT address
                            
  DEVICE_ID = DEVICE,700                -- Device object instance for IUT.

  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = MULTISTATE-INPUT, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = MULTISTATE-INPUT, 2   -- a second monitored object.
  ANALOG_ID = ANALOG_VARIABLE, 1        -- a third monitored object. 
  MULTIVAR_ID = MULTISTATE-VARIABLE, 1  --

  MONITORED_PROP = Present-Value        -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 90                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object
  NORMAL_LIMIT = 50

  REFERENCE_VALUE = 10
  REFERENCE_VALUE_AND_INCREMENT = 11
  REFERENCE_VALUE_EXCEEDS_INCREMENT = 15

  NOTIFICATION_CLASS = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated

  NOTIFY_TYPE = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"

  BITSTRING_FALSE = FALSE
  BITSTRING_TRUE = TRUE

  BITMASK = F,F,T,T
  BITMASK_VALUE_NONCHANGE = T,F,T,T
  BITMASK_VALUE_CHANGE = F,F,F,F

  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.

  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here

  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_CHANGE_OF_BITSTRING = 0
  EVENT_TYPE_CHANGE_OF_STATE = 1
  EVENT_TYPE_CHANGE_OF_VALUE = 2
  EVENT_TYPE_COMMAND_FAILURE = 3
  EVENT_TYPE_OUT_OF_RANGE = 5

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 8.8.4 CommandFailure Test

  TEST #8.8.4

  DEPENDENCIES ReadProperty Service Execution Tests, 9.15;
  DEPENDENCIES WriteProperty Service Execution Tests, 9.19

;  REFERENCE (B) 12.5, 12.15, 13.2, 13.3.4, 13.7

  -- Purpose: This test case verifies the correct operation of the 
  -- COMMAND_FAILURE algorithm. It applies to Event Enrollment objects with an
  -- Event_Type of COMMAND_FAILURE and to intrinsic event reporting for Binary
  -- Output and Multi-State Output objects.
  --
  -- Test Concept: The Feedback_Value (Feedback_Property_Reference) must be
  -- decoupled from the input signal that is normally used to verify the output.
  -- Initially Present_Value (referenced property) and Feedback_Value
  -- (Feedback_Property_Reference) are in agreement. Present_Value (the
  -- referenced property)is changed and an event notification should be
  -- transmitted indicating a transition to an OFFNORMAL state. The
  -- Feedback_Value (Feedback_Property_Reference) is changed to again agree with
  -- the Present_Value (referenced property). A second event notification is
  -- transmitted indicating a return to a NORMAL state.
  --
  -- Configuration Requirements: The IUT shall be configured such that the 
  -- Event_Enable property has a value of TRUE for the TO-OFFNORMAL and TO-NORMAL
  -- transitions. The Issue_Confirmed_Notifications property shall have a value
  -- of FALSE. The event-generating object shall be in a NORMAL state at the start
  -- of the test. The Feedback_Value property shall be decoupled from the input 
  -- signal that is normally used to verify the output so that it can be 
  -- independently manipulated.

  -- 1. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 2. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = FALSE_STATUS_FLAGS
      CloseTag 3
      )

  -- 3. IF (Present_Value is writable) THEN
  --         WRITE Present_Value = (a different value)
  --    ELSE
  --         MAKE (Present_Value take on a different value)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MULTIVAR_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = HI_LIMIT
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = SimpleAck
      Service = WriteProperty
      )

  -- 4. WAIT Time_Delay 

  -- 5. BEFORE Notification Fail Time
  --        RECEIVE UnconfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the intrinsic reporting object  
  --                                         being tested or the object 
  --                                         referenced by the Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-OFFNORMAL transition),
  --            'Event Type' = COMMAND_FAILURE,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = NORMAL,
  --            'To State' = OFFNORMAL,
  --            'Event Values' = Present_Value, Status_Flags, Feedback_Value

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = UnconfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MULTIVAR_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_COMMAND_FAILURE
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_NORMAL
      ENUM = 11, EVENT_STATE_OFFNORMAL
      OpenTag 12
        -- Command Failure
        -- OpenTag 3
        --   CHANGE: Choose one datatype
           UNSIGNED = 0, OFFNORMAL_VALUE
        --   ENUM = 0, OFFNORMAL_VALUE
        --   REAL = 0, OFFNORMAL_VALUE
        --   BITSTRING = 0, OFFNORMAL_VALUE
        --
           BITSTRING = 1, OFFNORMAL_STATUS_FLAGS
        --
        --   CHANGE: Choose one feedback
           UNSIGNED = 2, NORMAL_VALUE
        --   ENUM = 2, NORMAL_VALUE
        --   REAL = 2, NORMAL_VALUE
        --   BITSTRING = 2, NORMAL_VALUE
        -- CloseTag 3

      CloseTag 12
      )

  -- 6. TRANSMIT BACnet-SimpleAck-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = SimpleAck
      Service = UnconfirmedEventNotification
      )

  -- 7. VERIFY Status_Flags = (TRUE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = TFFF_STATUS_FLAGS
      CloseTag 3
      )

  -- 8. VERIFY Event_State = OFFNORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_OFFNORMAL
      CloseTag 3
      )

  -- 9. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --        VERIFY Event_Time_Stamps = (the timestamp in step 5, *, *)

  -- 10. IF (FeedBack_Value is writable) THEN
  --          WRITE Feedback_Value = (a value consistent with Present_Value)
  --     ELSE
  --          MAKE (Feedback_Value take on a value consistent with Presnt_Value)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Feedback-Value
      OpenTag 3
        UNSIGNED = HI_LIMIT
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = SimpleAck
      Service = WriteProperty
      )

  -- 11. WAIT Time_Delay

  -- 12. BEFORE Notification Fail Time
  --        RECEIVE UnconfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the intrinsic reporting object  
  --                                         being tested or the object 
  --                                         referenced by the Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = COMMAND_FAILURE,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = OFFNORMAL,
  --            'To State' = NORMAL,
  --            'Event Values' = Present_Value, Status_Flags, Feedback_Value

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = UnconfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MULTIVAR_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_COMMAND_FAILURE
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_OFFNORMAL
      ENUM = 11, EVENT_STATE_NORMAL
      OpenTag 12
        -- Command Failure
        -- OpenTag 3
        --   CHANGE: Choose one datatype
           UNSIGNED = 0, NORMAL_VALUE
        --   ENUM = 0, OFFNORMAL_VALUE
        --   REAL = 0, OFFNORMAL_VALUE
        --   BITSTRING = 0, OFFNORMAL_VALUE
        --
           BITSTRING = 1, OFFNORMAL_STATUS_FLAGS
        --
        --   CHANGE: Choose one feedback
           UNSIGNED = 2, NORMAL_VALUE
        --   ENUM = 2, NORMAL_VALUE
        --   REAL = 2, NORMAL_VALUE
        --   BITSTRING = 2, NORMAL_VALUE
        -- CloseTag 3

      CloseTag 12
      )

  -- 13. TRANSMIT BACnet-SimpleACK-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = SimpleAck
      Service = UnconfirmedEventNotification
      )

  -- 14. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = FALSE_STATUS_FLAGS
      CloseTag 3
      )

  -- 15. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MULTIVAR_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 16. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --        VERIFY Event_Time_Stamps = (the timestamp in step 5, *, the 
  --                                    timestamp in step 12)


