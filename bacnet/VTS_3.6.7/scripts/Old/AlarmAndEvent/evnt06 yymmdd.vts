;--------------------------------------------------------------
  ; Testing Support for FLOATING_LIMIT Test
  ;
  ; Exec_EventType_FloatingLimit.vts	evnt06mmddyy.vts
  ; 8.3.5
  ;   Ver 0.0   02/01/01    Anthony Makela
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------


SETUP FloatingLimit

  ;--------------------------------------------------------------
     IUT_IP = 208.6.162.35
  
  ;--------------------------------------------------------------
 ;
  ; TD_CONFIG
  ;
  ;"Untitled" = 1, ETHERNET, 0
  -- The network which is directly-connected to the TD
  -- and can be used to reach the IUT.
  -- Adjust the parameters as needed to reflect the actual
  -- physical environment. The first value represents the 
  -- physical network number, the second value the physical 
  -- network type and the third value the physical port.

  ;MY_MAC = 00d0b77347fc    -- MAC address of the TD
                           -- replace with you TD address

  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2000            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  ;IUT_IP = 0040ae000e65   -- MAC address of IUT
                           -- replace with your IUT address
                            
  DEVICE_ID = DEVICE,700                -- Device object instance for IUT.

  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = MULTISTATE-INPUT, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = MULTISTATE-INPUT, 2   -- a second monitored object.
  ANALOG_ID = ANALOG_VARIABLE, 1        -- a third monitored object. 
  MULTIVAR_ID = MULTISTATE-VARIABLE, 1  --

  MONITORED_PROP = Present-Value        -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 90                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object
  NORMAL_LIMIT = 50

  -- Floating limit values
  LOW_DIFF_LIMIT = 20
  HI_DIFF_LIMIT = 80
  HI_FLOAT_VALUE_DEADBAND = 75
  LOW_FLOAT_VALUE_DEADBAND = 25
  HI_FLOAT_VALUE = 90
  LOW_FLOAT_VALUE = 10 

  REFERENCE_VALUE = 10
  REFERENCE_VALUE_AND_INCREMENT = 11
  REFERENCE_VALUE_EXCEEDS_INCREMENT = 15

  NOTIFICATION_CLASS = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated

  NOTIFY_TYPE = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"

  BITSTRING_FALSE = FALSE
  BITSTRING_TRUE = TRUE

  BITMASK = F,F,T,T
  BITMASK_VALUE_NONCHANGE = T,F,T,T
  BITMASK_VALUE_CHANGE = F,F,F,F

  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.
  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here
  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_CHANGE_OF_BITSTRING = 0
  EVENT_TYPE_CHANGE_OF_STATE = 1
  EVENT_TYPE_CHANGE_OF_VALUE = 2
  EVENT_TYPE_COMMAND_FAILURE = 3
  EVENT_TYPE_FLOATING_LIMIT = 4
  EVENT_TYPE_OUT_OF_RANGE = 5

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 8.3.5 FloatingLimit Test

  TEST #8.3.5

  DEPENDENCIES ReadProperty Service Execution Tests, 9.15;
  DEPENDENCIES WriteProperty Service Execution Tests, 9.19

;  REFERENCE (B) 12.10, 12.13, 13.2, 13.3.5, 13.7

  -- Purpose: This test case verifies the correct operation of the Floating
  -- Limit event algorithm. It apples to Event Enrollment objects with an 
  -- Event_Type of FLOATING_LIMIT and to the Loop objects that support 
  -- intrinsic reporting. When testing Loop objects both High_Diff_limit and
  -- Low_Diff_Limit shall be replaced by Error_Limit in the test description
  -- below.
  --
  -- Test Concept: The object begins the test in a NORMAL state. The referenced
  -- property is raised to a value that is below but within Deadband of the
  -- high limit. At this point the object should still be in a NORMAL state. The
  -- referenced property is raised to a value that is above the high limit. 
  -- After the time delay expires the object should enter the HIGH_LIMIT state
  -- and transmit an event notification message. The referenced property is
  -- lowered to a value that is below the high limit but still within 
  -- Deadband of the limit. The object should remain in the HIGH_LIMIT state.
  -- The referenced property is lowered further to a normal value that is not
  -- within Deadband of a limit. After the time delay expires the object should
  -- enter the NORMAL state and issue an event notification. The same process is
  -- repeated to test the low limit.
  --
  -- Configuration Requirements: The IUT shall be configured such that the
  -- Event_Enable property has a value of TRUE for the TO_OFFNORMAL and
  -- TO_NORMAL transitions. The Issue_Confirmed_Notifications property shall 
  -- have a value of TRUE. The event-generating objects shall be in a NORMAL 
  -- state at the start of the test.

  -- 1. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

-- 2. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that
--               (Setpoint_Reference + High_Diff_Limit - Deadband) < x <
--               (Setpoint_Reference + High_Diff_limit))
--    ELSE
--         MAKE (the referenced property have a value x such that
--               (Setpoint_Reference + High_Diff_Limit - Deadband) < x <
--               (Setpoint_Reference + High_Diff_Limit))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = HI_FLOAT_VALUE_DEADBAND
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 3. WAIT (Time_Delay + Notification Fail Time)

  -- 4. CHECK (verify that no notification message is transmitted)

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      )

  -- 5. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 6. IF (the reference property is writable) THEN
  --         WRITE (referenced property) = (a value x such that x >
  --               (Setpoint_Reference + High_Diff_Limit))
  --    ELSE
  --         MAKE (the referenced property have a value x such that x >
  --               (Setpoint_Reference + High_Diff_Limit))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = HI_DIFF_LIMIT
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 7. WAIT Time_Delay

  -- 8. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Loop object being tested  
  --                                         or the object referenced by the
  --                                         Event Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-OFFNORMAL transition),
  --            'Event Type' = FLOATING_LIMIT,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = NORMAL,
  --            'To State' = HIGH_LIMIT,
  --            'Event Values' = reference-value, Status_Flags, setpoint-value,
  --                             error-limit

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MONITORED_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_FLOATING_LIMIT
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_NORMAL
      ENUM = 11, EVENT_STATE_HILIMIT
      OpenTag 12
        -- Floating Limit
         OpenTag 
           UNSIGNED = 0, OFFNORMAL_VALUE         -- should be all REAL
           UNSIGNED = 1, OFFNORMAL_STATUS_FLAGS
           UNSIGNED = 2, SETPOINT_VALUE
           UNSIGNED = 3, FLOATING_LIMIT_VALUE
         CloseTag 4

      CloseTag 12
      )

  -- 9. TRANSMIT BACnet-SimpleAck-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = Simple-Ack
      Service = ConfirmedEventNotification
      )

  -- 10. VERIFY Status_Flags = (TRUE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = TFFF_STATUS_FLAGS
      CloseTag 3
      )

  -- 11. VERIFY Event_State = HIGH_LIMIT

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_HILIMIT
      CloseTag 3
      )

  -- 12. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --         VERIFY Event_Time_Stamps = (the timestamp is step 8, *, *)

  -- 13. IF (the reference property is writable) THEN
  --         WRITE (referenced property) = (a value x such that 
  --               (Setpoint_Reference + High_Diff_Limit - Deadband) < x <
  --               (Setpoint_Reference + High_Diff_Limit))
  --    ELSE
  --         MAKE (the referenced property have a value x such that 
  --               (Setpoint_Reference + High_Diff_Limit - Deadband) < x <
  --               (Setpoint_Reference + High_Diff_Limit))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = HI_FLOAT_VALUE_DEADBAND
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 14. WAIT (Time_Delay + Notification Delay Time)

  -- 15. CHECK (verify that no notification message has been transmitted)

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      )

  -- 16. VERIFY Event_State = HIGH_LIMIT

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_HILIMIT
      CloseTag 3
      )

-- 17. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that
--               (Setpoint_Reference + High_Diff_Limit + Deadband) < x <
--               (Setpoint_Reference + High_Diff_limit - Deadband))
--    ELSE
--         MAKE (the referenced property have a value x such that
--               (Setpoint_Reference + High_Diff_Limit + Deadband) < x <
--               (Setpoint_Reference + High_Diff_Limit - Deadband))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = LOW_FLOAT_VALUE_DEADBAND
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 18. WAIT Time_Delay

  -- 19. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Loop object being tested  
  --                                         or the object referenced by the
  --                                         Event Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = FLOATING_LIMIT,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = HIGH_LIMIT,
  --            'To State' = NORMAL,
  --            'Event Values' = reference-value, Status_Flags, setpoint-value,
  --                             error-limit

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MONITORED_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_FLOATING_LIMIT
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_HILIMIT
      ENUM = 11, EVENT_STATE_NORMAL
      OpenTag 12
        -- Floating Limit
         OpenTag 
           UNSIGNED = 0, NORMAL_VALUE         -- should be all REAL
           UNSIGNED = 1, NORMAL_STATUS_FLAGS
           UNSIGNED = 2, SETPOINT_VALUE
           UNSIGNED = 3, FLOATING_LIMIT_VALUE
         CloseTag 4

      CloseTag 12
      )

  -- 20. TRANSMIT BACnet-SimpleACK-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = Simple-Ack
      Service = ConfirmedEventNotification
      )

  -- 21. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = FALSE_STATUS_FLAGS
      CloseTag 3
      )

  -- 22. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 23. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --         VERIFY Event_Time_Stamps = (the timestamp is step 8, *, the 
  --                                     timestamp in step 19)

-- 24. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that
--               (Setpoint_Reference - Low_Diff_Limit) < x <
--               (Setpoint_Reference - Low_Diff_limit + Deadband))
--    ELSE
--         MAKE (the referenced property have a value x such that
--               (Setpoint_Reference - High_Diff_Limit) < x <
--               (Setpoint_Reference - High_Diff_Limit + Deadband))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = LOW_DIFF_LIMIT
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 25. WAIT (Time_Delay + Notification Fail Time)

  -- 26. CHECK (verify that no notification message has been transmitted)

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      )

  -- 27. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

-- 28. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that x <
--               (Setpoint_Reference - Low_Diff_Limit))
--    ELSE
--         MAKE (the referenced property have a value x such that x <
--               (Setpoint_Reference - Low_Diff_Limit))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = LOW_FLOAT_VALUE
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 29. WAIT Time_Delay

  -- 30. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Loop object being tested  
  --                                         or the object referenced by the
  --                                         Event Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = FLOATING_LIMIT,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = NORMAL,
  --            'To State' = LOW_LIMIT,
  --            'Event Values' = reference-value, Status_Flags, setpoint-value,
  --                             error-limit

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MONITORED_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_FLOATING_LIMIT
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_NORMAL
      ENUM = 11, EVENT_STATE_LOLIMIT
      OpenTag 12
        -- Floating Limit
         OpenTag 
           UNSIGNED = 0, OFFNORMAL_VALUE         -- should be all REAL
           UNSIGNED = 1, OFFNORMAL_STATUS_FLAGS
           UNSIGNED = 2, SETPOINT_VALUE
           UNSIGNED = 3, FLOATING_LIMIT_VALUE
         CloseTag 4

      CloseTag 12
      )

  -- 31. TRANSMIT BACnet-SimpleACK-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = Simple-Ack
      Service = ConfirmedEventNotification
      )

  -- 32. VERIFY Status_Flags = (TRUE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = TFFF_STATUS_FLAGS
      CloseTag 3
      )

  -- 33. VERIFY Event_State = LOW_LIMIT

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_LOLIMIT
      CloseTag 3
      )

  -- 34. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --         VERIFY Event_Time_Stamps = (the timestamp is step 30, *, the 
  --                                     timestamp in step 12)

-- 35. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that
--               (Setpoint_Reference - Low_Limit) < x <
--               (Setpoint_Reference - Low_Limit + Deadband))
--    ELSE
--         MAKE (the referenced property have a value x such that
--               (Setpoint_Reference - Low_Limit) < x <
--               (Setpoint_Reference - Low_Limit + Deadband))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = LOW_DIFF_LIMIT
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 36. WAIT (Time_Delay + Notification Fail Time)

  -- 37. CHECK (verify that no notification message has been transmitted)

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      )

  -- 38. VERIFY Event_State = Low_Limit

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_LOLIMIT
      CloseTag 3
      )

-- 39. IF (the reference property is writable) THEN
--         WRITE (referenced property) = (a value x such that
--               (Setpoint_Reference - Low_Limit + Deadband) < x <
--               (Setpoint_Reference + High_Limit - Deadband))
--    ELSE
--         MAKE (the referenced property have a value x such that
--               (Setpoint_Reference - Low_Limit + Deadband) < x <
--               (Setpoint_Reference + High_Limit - Deadband))

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = LOW_FLOAT_VALUE_DEADBAND
      CloseTag 3
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = Simple-Ack
      Service = WriteProperty
      )

  -- 40. WAIT Time_Delay

  -- 41. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Loop object being tested  
  --                                         or the object referenced by the
  --                                         Event Enrollment
  --                                         object being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = FLOATING_LIMIT,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = LOW_LIMIT,
  --            'To State' = NORMAL,
  --            'Event Values' = reference-value, Status_Flags, setpoint-value,
  --                             error-limit

    AND (
      NETWORK = "Untitled"
      DER = FALSE
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, PROCESS_ID
      Object = 1, DEVICE_ID
      Object = 2, MONITORED_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_FLOATING_LIMIT
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_LOLIMIT
      ENUM = 11, EVENT_STATE_NORMAL
      OpenTag 12
        -- Floating Limit
         OpenTag 
           UNSIGNED = 0, NORMAL_VALUE         -- should be all REAL
           UNSIGNED = 1, NORMAL_STATUS_FLAGS
           UNSIGNED = 2, SETPOINT_VALUE
           UNSIGNED = 3, FLOATING_LIMIT_VALUE
         CloseTag 4

      CloseTag 12
      )

  -- 42. TRANSMIT BACnet-SimpleACK-PDU

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      DER = FALSE
      PDU = Simple-Ack
      Service = ConfirmedEventNotification
      )

  -- 43. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = TFFF_STATUS_FLAGS
      CloseTag 3
      )

  -- 44. VERIFY Event_State = NORMAL

    SEND (
      NETWORK = "Untitled"
      DA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      SegMsg = 0
      SegResp = 0
      MaxResp = 480
      InVokeID = 3
      DER = TRUE
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      )

    EXPECT (
      NETWORK = "Untitled"
      SA = IUT_IP
      bvlci =ORIGINAL-UNICAST-NPDU
      DER = FALSE
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 45. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --         VERIFY Event_Time_Stamps = (the timestamp is step 30, *, the 
  --                                     timestamp in step 41)


