  ;-------------------------------------------------------------------------------------
  ;  Unconfirmed Change of Value (COV) Notification Service Initiation Tests
  ; COV Notification from an Analog Input, Analog Output, and Analog Value
  ; Object Present_Value Property
  ;
  ;  UnconfirmedCOV_APV.vts UnCOVddmmyy-01.vts
  ;
  ;  Ver 1.0    03/18/01    P. Bowen    Initial version
  ;  Ver 1.1    05/27/01    P. Bowen    Updated test step documentation
  ;                     and make LIFETIME = 0
  ;
  ;  Purpose: This test case verifies that the IUT can initiate
  ; UnconfirmedCOVNotification service requests conveying a change of the
  ; Present_Value property of Analog Input, Analog Output, and Analog Value
  ; objects.
  ;
  ;  Note: the following tests should be executed before running this test:
  ; ReadProperty Service Execution Tests
  ; WriteProperty Service Execution Tests
  ;
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------

  SETUP Unconfirmed COV Notification Test - Analog Object Present Value Property
  INCLUDE "..\config.vts"

  ;-------------------------------------------------------------------------------------
  ;
  ; TD_CONFIG
  ;

  OBJECT1 = Analog-Value, 1 ; Object which is the subject of the COV tests

  PID = 10          ; Subscriber Process Identifier
  LIFETIME = 0          ; Subscription lifetime in secs (0 = indefinite)
  WRITE_PRIORITY = 1        ; Priority for writing PV changes

  PV_LT_COV_INCREMENT = 53.0    ; New PV < Old PV + COV Increment
  PV_GT_COV_INCREMENT = 70.0    ; New PV > Old PV + COV Increment

  ;-------------------------------------------------------------------------------------

   SECTION Unconfirmed COV Notification Test - Analog Object Present Value Property

  -- This test takes place across test steps #1a - #1f so the TD can be manually
  -- paused between tests. This is necessary since the COV Notifications must be
  -- verified manually.

  -- Configuration Requirements: At the beginning of the test, the Out-Of-Service
  -- property shall have a value of FALSE.

  -- Test Concept: A subscription for unconfirmed COV notifications is established.
  -- The Present_Value of the monitored object is changed by an amount less than the
  -- COV increment and it is verified that no COV notification is received. The
  -- Present_Value is then changed by an amount greater than the COV increment
  -- and a notification shall be received. The Present_Value may be changed using
  -- the WriteProperty service or by another means such as changing the input
  -- signal represented by an Analog Input object. For some implementations it
  -- may be necessary to write to the Out_Of_Service property first to accomplish
  -- this task. For implementations where it is not possible to write to these
  -- properties at all the vendor shall provide an alternative trigger mechanism
  -- to accomplish this task. All of these methods are equally acceptable.

  -- Test Steps:
  --    REPEAT X = (one supported object of each type from the set Analog Input,
  --            Analog Output, and Analog Value) DO {
  --    1. TRANSMIT SubscribeCOV-Request,
  --        'Subscriber Process Identifier' = (any value > 0 chosen by the TD),
  --        'Monitored Object Identifier' = X,
  --        'Issue Confirmed Notifications' = FALSE,
  --        'Lifetime' = 0
  --    2. RECEIVE BACnet-SimpleACK-PDU
  --    3. RECEIVE UnconfirmedCOVNotification-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Initiating Device Identifier' = IUT,
  --        'Monitored Object Identifier' = X,
  --        'Time Remaining' = 0,
  --        'List of Values' = (the initial Present_Value and initial Status_Flags)
  --    4. TRANSMIT ReadProperty-Request,
  --        'Object Identifier' = X,
  --        'Property Identifier' = COV_Increment
  --    5. RECEIVE BACnet-ComplexACK-PDU,
  --        'Object Identifier' = X,
  --        'Property Identifier' = COV_Increment,
  --        'Property Value' = (a value "increment" that will be used below)
  --    6. IF (Out_Of_Service is writable) THEN
  --        WRITE X, Out_Of_Service = TRUE
  --       RECEIVE BACnet-SimpleACK-PDU
  --    7. BEFORE Notification Fail Time
  --        RECEIVE UnconfirmedCOVNotification-Request,
  --            'Subscriber Process Identifier' = (the same value used in step 1),
  --            'Initiating Device Identifier' = IUT,
  --            'Monitored Object Identifier' = X,
  --            'Time Remaining' = 0,
  --            'List of Values' = (the initial Present_Value and new Status_Flags)
  --    8. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial Present_Value"
  --            by less than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --       ELSE
  --        MAKE (Present_Value = any value that differs from "initial Present_Value"
  --            by less than "increment")
  --    9. WAIT NotificationFailTime
  --    10. CHECK (verify that no COV notification was transmitted)
  --    11. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial Present_Value"
  --            by an amount greater than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --         ELSE
  --        MAKE (Present_Value = any value that differs from "initial Present_Value"
  --            by an amount greater than "increment")
  --    12. BEFORE NotificationFailTime
  --        RECEIVE UnconfirmedCOVNotification-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Initiating Device Identifier' = IUT,
  --        'Monitored Object Identifier' = X,
  --        'Time Remaining' = 0,
  --        'List of Values' = (the new Present_Value and new Status_Flags)
  --    13. TRANSMIT SubscribeCOV-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Monitored Object Identifier' = X
  --    14. RECEIVE BACnet-SimpleACK-PDU
  --    15. IF (Out_Of_Service is writable) THEN
  --        WRITE X, Out_Of_Service = FALSE
  --        RECEIVE BACnet-SimpleACK-PDU
  --    }

  ;-------------------------------------------------------------------------------------
  TEST #1a Subscribe to COV and Receive Unconfirmed COV Notification

  DEPENDENCIES None

  REFERENCE (B) Unconfirmed COV Notification Service and (T) Unconfirmed COV Notification Test - AI/AO/AV PV Property

  -- Step #1-3: Subscribe to COV and Receive Unconfirmed COV Notification Request

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = SubscribeCOV
      Unsigned = 0, PID         ; Process-Identifier = PID
      Object = 1, OBJECT1       ; Object-Identifier = OBJECT1
      Boolean = 2, FALSE        ; Request unconfirmed notifications
      Unsigned = 3, LIFETIME        ; Subscribe for LIFETIME seconds
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = UnconfirmedCOVNotification
  --  )

  ;-------------------------------------------------------------------------------------
  TEST #1b Verify (read) the COV-Increment property for the analog object

  DEPENDENCIES None

  -- Step #4: Verify (read) the COV-Increment property for the analog object

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment
    )

  -- Step #5: Receive Complex ACK

    EXPECT (
      Sa = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment
      Opentag 3
        AL = {COV-Increment}
      Closetag 3
    )

  ;-------------------------------------------------------------------------------------
  TEST #1c Make Out-of-Service = TRUE and Receive Unconfirmed COV Notification Request

  DEPENDENCIES None

  -- Step #6: Make Out-of-Service = TRUE and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
        BOOLEAN = TRUE
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Sservice write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #7: Before NotificationFailTime Receive Unconfirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = UnconfirmedCOVNotification
  --  )

  ;-------------------------------------------------------------------------------------
  TEST #1d  Make New PV < Old PV + COV Increment and Verify No COV message is Sent by IUT

  DEPENDENCIES None

  -- Step #8: Make PV < PV + COV Increment and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_LT_COV_INCREMENT  ; Make PV < PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Steps #9 & 10: Wait Notification Fail Time and check (manually) that no COV
  -- message was sent by IUT

  ;-------------------------------------------------------------------------------------
  TEST #1e Make New PV > Old PV + COV Increment and Receive COV Notification

  DEPENDENCIES None

  -- Step #11: Trigger COV message by making PV > PV + COV Increment and Receive Simple ACK

  SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_GT_COV_INCREMENT  ; Make PV > PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #12: Before NotificationFailTime Receive Unconfirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = UnconfirmedCOVNotification
  --  )

 ;-------------------------------------------------------------------------------------
  TEST #1f Send Unsubscribe COV Request and Make Out-of-Service = FALSE

  DEPENDENCIES None

  -- Steps #13 & 14: Send Unsubscribe COV Request to IUT and Receive Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = SubscribeCOV        ; Cancel COV Subscription request
      Unsigned = 0, PID         ; Process-Identifier = PID
      Object = 1, OBJECT1       ; Object-Identifier = OBJECT1
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #15: Return point to service (make Out-of-Service = FALSE)

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
         BOOLEAN = FALSE        ; Make Out-of-Service = FALSE
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Service write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )