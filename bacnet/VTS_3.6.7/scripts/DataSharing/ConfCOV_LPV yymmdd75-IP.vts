  ;-------------------------------------------------------------------------------------
  ;  Confirmed Change of Value (COV) Notification Service Initiation Tests
  ; COV Notification from Loop Object Present Value property
  ;
  ;  ConfirmedCOV_LPV.vts   CoCOVddmmyy-07.vts
  ;
  ;  Ver 1.0   05/26/01    P. Bowen Initial version
  ;
  ;  Purpose:  This test case verifies that the IUT can initiate
  ; ConfirmedCOVNotification service requests conveying a change of the
  ; Present_Value property of a loop object.
  ;
  ;  Note: the following tests should be executed before running this test case:
  ; ReadProperty Service Execution Tests
  ; WriteProperty Service Execution Tests
  ;
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------

  SETUP Confirmed COV Notification Test - Loop Object Present Value Property
  INCLUDE "..\config.vts"

  ;-------------------------------------------------------------------------------------
  ;
  ; TD_CONFIG
  ;

  OBJECT1 = Loop, 1     ; Object which is the subject of the COV test

  PID = 20          ; Subscriber Process Identifier
  LIFETIME = 0          ; Subscription lifetime in secs (0 = indefinite)
  WRITE_PRIORITY = 1        ; Priority for writing changes

  PV_LT_COV_INCREMENT = 100.5   ; Test Value < Present Value + COV Increment
  PV_GT_COV_INCREMENT = 110.0   ; Test Value > Present Value + COV Increment

  INVOKEID_1 = 0       ; InvokeID for first confirmed COV notification
  INVOKEID_2 = 1       ; InvokeID for second confirmed COV notification
  INVOKEID_3 = 2       ; InvokeID for third confirmed COV notification

  ;-------------------------------------------------------------------------------------

   SECTION Confirmed COV Notification Test - Loop Object Present Value Property

  -- This test takes place across test #1a - #1i so the TD can be manually paused
  -- between tests. This is necessary since a time delay is needed in this test
  -- case and VTS doesn't provide a means for doing this within the script.

  -- Configuration Requirements: At the beginning of the test, the Out_Of_Service
  -- property shall have a value of FALSE.

  -- Test Concept: Test Concept: A subscription for COV notifications is established.
  -- The Present_Value of the monitored object is changed by an amount less than the
  -- COV increment and it is verified that no COV notification is received. The
  -- Present_Value is then changed by an amount greater than the COV increment and a
  -- notification shall be received.

  -- The Present_Value may be changed by placing the Loop Out_Of_Service and writing
  -- directly to the Present_Value. For implementations where this option is not
  -- possible an alternative trigger mechanism shall be provided to accomplish this
  -- task, such as changing the Setpoint or the Setpoint_Reference. All of these
  -- methods are equally acceptable.

  -- Note: The object identifier of the Loop object being tested is designated as L
  -- in the test steps below.

  -- Test Steps:
  -- 1. TRANSMIT SubscribeCOV-Request,
  --        'Subscriber Process Identifier' = (any value > 0 chosen by the TD),
  --        'Monitored Object Identifier' = L,
  --        'Issue Confirmed Notifications' = TRUE,
  --        'Lifetime' = 0
  -- 2. RECEIVE BACnet-SimpleACK-PDU
  -- 3. RECEIVE ConfirmedCOVNotification-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Initiating Device Identifier' = IUT,
  --        'Monitored Object Identifier' = L,
  --        'Time Remaining' = 0,
  --        'List of Values' = (the initial Present_Value, initial Status_Flags,
  --         initial Setpoint, and initial Controlled_Variable_Value)
  -- 4. TRANSMIT BACnet-SimpleACK-PDU
  -- 5. TRANSMIT ReadProperty-Request,
  --        'Object Identifier' = L,
  --        'Property Identifier' = COV_Increment
  -- 6. RECEIVE BACnet-ComplexACK-PDU,
  --        'Object Identifier' = L,
  --        'Property Identifier' = COV_Increment,
  --        'Property Value' = (a value "increment" that will be used below)
  -- 7. IF (Out_Of_Service is writable) THEN
  --        WRITE X, Out_Of_Service = TRUE
  -- 8. RECEIVE BACnet-SimpleACK-PDU
  -- 9. BEFORE Notification Fail Time
  --     RECEIVE ConfirmedCOVNotification-Request,
  --         'Subscriber Process Identifier' = (the same value used in step 1),
  --         'Initiating Device Identifier' = IUT,
  --         'Monitored Object Identifier' = L,
  --         'Time Remaining' = 0,
  --         'List of Values' = (the initial Present_Value, new Status_Flags,
  --          initial Setpoint, and initial Controlled_Variable_Value)
  -- 10. TRANSMIT BACnet-SimpleACK-PDU
  -- 11. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial
  --         Present_Value" by less than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --     ELSE
  --        MAKE (Present_Value  = any value that differs from "initial
  --         Present_Value" by less than "increment")
  -- 12. WAIT NotificationFailTime
  -- 13. CHECK (verify that no COV notification was transmitted)
  -- 14. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial
  --         Present_Value" by an amount greater than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --     ELSE
  --        MAKE (Present_Value  = any value that differs from "initial
  --         Present_Value" by an amount greater than "increment")
  -- 15. BEFORE NotificationFailTime
  --      RECEIVE ConfirmedCOVNotification-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Initiating Device Identifier' = IUT,
  --        'Monitored Object Identifier' = L,
  --        'Time Remaining' = 0,
  --        'List of Values' = (the new Present_Value, new Status_Flags,
  --         initial Setpoint, and initial Controlled_Variable_Value)
  -- 15. TRANSMIT BACnet-SimpleACK-PDU
  -- 16. TRANSMIT SubscribeCOV-Request,
  --        'Subscriber Process Identifier' = (the same value used in step 1),
  --        'Monitored Object Identifier' = L
  -- 17. RECEIVE BACnet-SimpleACK-PDU
  -- 18. IF (Out_Of_Service is writable) THEN
  --        WRITE L, Out_Of_Service = FALSE
  -- 19. RECEIVE BACnet-SimpleACK-PDU

  ;-------------------------------------------------------------------------------------
  TEST #1a Subscribe to COV and Receive COV Notification Request

  DEPENDENCIES None

  REFERENCE (B) Confirmed COV Notification Service and (T) Confirmed COV Notification Test - Loop Object PV Property

  -- Step #1 & 2: Subscribe to COV and Receive Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = SubscribeCOV
      Unsigned = 0, PID         ; Process-Identifier = PID
      Object = 1, OBJECT1       ; Object-Identifier = OBJECT1
      Boolean = 2, TRUE         ; Request confirmed notifications
      Unsigned = 3, LIFETIME        ; Subscribe for LIFETIME seconds
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #3: Receive Confirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )
   wait 1
  ;-------------------------------------------------------------------------------------
  TEST #1b Acknowledge COV Notification Request based on SubscribeCOV Request

  DEPENDENCIES None

  -- Step #4: Transmit Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedCOVNotification
    )

;-------------------------------------------------------------------------------------
  TEST #1c Verify (read) the COV-Increment property for the Loop object

  DEPENDENCIES None

  -- Step #5: Verify (read) the COV-Increment property for the Loop object
    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WritePropertyMultiple
      Object = 0, OBJECT1
      OpenTag 1
        Property = 0, COV-Increment
        OpenTag 2
            REAL = 105.0
        CloseTag 2
       CloseTag 1
    )

    EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WritePropertyMultiple
    )

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment   ; Read COV-Increment property
    )

  -- Step #6: Receive Complex ACK

    EXPECT (
      Sa = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment
      Opentag 3
       Real = 105.0
      Closetag 3
    )

  ;-------------------------------------------------------------------------------------
  TEST #1d Make Out-of-Service = TRUE and Receive COV Notification Request

  DEPENDENCIES None

  -- Step #7: Make Out-of-Service = TRUE and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
        BOOLEAN = TRUE          ; Put OBJECT1 out of service
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Service write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #8: Receive Confirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )

   wait 1
  ;-------------------------------------------------------------------------------------
  TEST #1e Acknowledge COV Notification Request based on Out-of-Service Change

  DEPENDENCIES None

  -- Step #9: Transmit Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedCOVNotification
    )

  ;-------------------------------------------------------------------------------------
  TEST #1f  Make New PV < Old PV + COV Increment and Verify No COV Notification is Sent by IUT

  DEPENDENCIES None

  -- Step #10: Make PV < PV + COV Increment and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_LT_COV_INCREMENT  ; Make PV < PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Steps #11 & 12: Wait Notification Fail Time and check (manually) that no COV
  -- message was sent by IUT

  ;-------------------------------------------------------------------------------------
  TEST #1g Make New PV > Old PV + COV Increment and Receive COV Notification Request

  DEPENDENCIES None

  -- Step #13: Trigger COV message by making PV > PV + COV Increment and Receive Simple ACK

  SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_GT_COV_INCREMENT  ; Make PV > PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #14: Receive Confirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = ConfirmedCOVNotification
  --  )

   wait 1

  ;-------------------------------------------------------------------------------------
  TEST #1h Acknowledge COV Notification Request based on Present Value Change

  DEPENDENCIES None

  -- Step #15: Transmit Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedCOVNotification
    )

  ;-------------------------------------------------------------------------------------
  TEST #1i Send Unsubscribe COV Request and Make Out-of-Service = FALSE

  DEPENDENCIES None

  -- Steps #16 & 17: Send Unsubscribe COV Request to IUT and Receive Simple ACK

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = SubscribeCOV        ; Cancel COV Subscription request
      Unsigned = 0, PID         ; Process-Identifier = PID
      Object = 1, OBJECT1       ; Object-Identifier = OBJECT1
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = SubscribeCOV
    )

  -- Step #18: Return point to service (make Out-of-Service = FALSE)

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
         BOOLEAN = FALSE        ; Put OBJECT1 back in service
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Service write priority
    )

  -- Step #19: Receive Simple ACK

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )