  ;-------------------------------------------------------------------------------------
  ;  Unsubscribed, Unconfirmed COV Notification Service Initiation Tests
  ; COV Notification from an Analog Input, Analog Output, and Analog Value
  ; Object Present_Value Property
  ;
  ;  UUnconfirmedCOV_APV.vts    UUnCOVddmmyy-01.vts
  ;
  ;  Ver 1.0    05/27/01    P. Bowen    Initial version
  ;
  ;  Purpose: This test case verifies that the IUT can initiate Unsubscribed,
  ; UnconfirmedCOVNotification service requests conveying a change of the
  ; Present_Value property of Analog Input, Analog Output, and Analog Value
  ; objects.
  ;
  ;  Note - the following tests should be executed before running this test case:
  ; ReadProperty Service Execution Tests
  ; WriteProperty Service Execution Tests
  ;
  ;  In the REFERENCE section "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;-------------------------------------------------------------------------------------

  SETUP Unsubscribed, Unconfirmed COV Notification Test - Analog Object Present Value Property
  INCLUDE "..\config.vts"
 PID = 100
 LIFETIME = 100

  OBJECT1 = Analog-Value, 1 ; Object which is the subject of the COV tests

  WRITE_PRIORITY = 1        ; Priority for writing PV changes

  PV_LT_COV_INCREMENT = 0.5 ; New PV < Old PV + COV Increment
  PV_GT_COV_INCREMENT = 10.0    ; New PV > Old PV + COV Increment

  ;-------------------------------------------------------------------------------------

   SECTION Unsubscribed, Unconfirmed COV Notification Test - Analog Object Present Value Property

  -- This test takes place across test steps #1a - #1e so the TD can be manually
  -- paused between tests. This is necessary since the COV Notifications must be
  -- verified manually.

  -- Configuration Requirements: At the beginning of the test, the Out-Of-Service
  -- property shall have a value of FALSE.

  -- Test Concept: No COV subscription is established. The Present_Value of the
  -- monitored object is changed by an amount less than the COV increment and it
  -- is verified that no COV notification is received. The Present_Value is then
  -- changed by an amount greater than the COV increment and a COV notification
  -- shall be received.

  -- The Present_Value may be changed using the WriteProperty service or by
  -- another means such as changing the input signal represented by an Analog Input
  -- object. For some implementations it may be necessary to write to the
  -- Out_Of_Service property first to accomplish this task. For implementations
  -- where it is not possible to write to these properties at all the vendor shall
  -- provide an alternative trigger mechanism to accomplish this task. All of these
  -- methods are equally acceptable.

  -- Test Steps:
  --    REPEAT X = (one supported object of each type from the set Analog Input,
  --            Analog Output, and Analog Value) DO {
  --    1. TRANSMIT ReadProperty-Request,
  --        'Object Identifier' = X,
  --        'Property Identifier' = COV_Increment
  --    2. RECEIVE BACnet-ComplexACK-PDU,
  --        'Object Identifier' = X,
  --        'Property Identifier' = COV_Increment,
  --        'Property Value' = (a value "increment" that will be used below)
  --    3. IF (Out_Of_Service is writable) THEN
  --        WRITE X, Out_Of_Service = TRUE
  --       RECEIVE BACnet-SimpleACK-PDU
  --    4. BEFORE Notification Fail Time
  --        RECEIVE UnconfirmedCOVNotification-Request,
  --            'Subscriber Process Identifier' = 0,
  --            'Initiating Device Identifier' = IUT,
  --            'Monitored Object Identifier' = X,
  --            'Time Remaining' = 0,
  --            'List of Values' = (the initial Present_Value and new Status_Flags)
  --    5. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial Present_Value"
  --            by less than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --       ELSE
  --        MAKE (Present_Value = any value that differs from "initial Present_Value"
  --            by less than "increment")
  --    6. WAIT NotificationFailTime
  --    7. CHECK (verify that no COV notification was transmitted)
  --    8. IF (Present_Value is now writable) THEN
  --        WRITE X, Present_Value = (any value that differs from "initial Present_Value"
  --            by an amount greater than "increment")
  --        RECEIVE BACnet-SimpleACK-PDU
  --         ELSE
  --        MAKE (Present_Value = any value that differs from "initial Present_Value"
  --            by an amount greater than "increment")
  --    9. BEFORE NotificationFailTime
  --        RECEIVE UnconfirmedCOVNotification-Request,
  --        'Subscriber Process Identifier' = 0,
  --        'Initiating Device Identifier' = IUT,
  --        'Monitored Object Identifier' = X,
  --        'Time Remaining' = 0,
  --        'List of Values' = (the new Present_Value and new Status_Flags)
  --    10. IF (Out_Of_Service is writable) THEN
  --        WRITE X, Out_Of_Service = FALSE
  --        RECEIVE BACnet-SimpleACK-PDU
  --    }

  ;-------------------------------------------------------------------------------------
  TEST #1a Verify (read) the COV-Increment property for the analog object

  DEPENDENCIES None

  -- Step #1: Verify (read) the COV-Increment property for the analog object

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = SubscribeCOV
      Unsigned = 0, PID         ; Process-Identifier = PID
      Object = 1, OBJECT1       ; Object-Identifier = OBJECT1
      Boolean = 2, FALSE        ; Request Unconfirmed notifications
      Unsigned = 3, LIFETIME        ; Subscribe for LIFETIME seconds
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = SubscribeCOV
    )

    SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment
    )

  -- Step #2: Receive Complex ACK

    EXPECT (
      Sa = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, OBJECT1
      Property = 1, COV-Increment
      OpenTag 3         ; this should work but test for returned
         REAL = 5.0 ; value will fail so wait for VTS bug to
      CloseTag 3            ; be fixed...
    )

  ;-------------------------------------------------------------------------------------
  TEST #1b Make Out-of-Service = TRUE and Receive Unconfirmed COV Notification Request

  DEPENDENCIES None

  -- Step #3: Make Out-of-Service = TRUE and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
        BOOLEAN = TRUE
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Sservice write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #4: Before NotificationFailTime Receive Unconfirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = UnconfirmedCOVNotification
  --  )

  ;-------------------------------------------------------------------------------------
  TEST #1c  Make New PV < Old PV + COV Increment and Verify No COV message is Sent by IUT

  DEPENDENCIES None

  -- Step #5: Make PV < PV + COV Increment and Receive Simple ACK

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_LT_COV_INCREMENT  ; Make PV < PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Steps #6 & 7: Wait Notification Fail Time and check (manually) that no COV
  -- message was sent by IUT

  ;-------------------------------------------------------------------------------------
  TEST #1d Make New PV > Old PV + COV Increment and Receive COV Notification

  DEPENDENCIES None

  -- Step #8: Trigger COV message by making PV > PV + COV Increment and Receive Simple ACK

  SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Present-Value
      OpenTag 3
        REAL = PV_GT_COV_INCREMENT  ; Make PV > PV + COV Increment
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set PV write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  -- Step #9: Before NotificationFailTime Receive Unconfirmed COV Notification Request

  --  AND (             ; Can't control the timing of the IUT's
  --    PDU = Confirmed-Request
  --    Service = UnconfirmedCOVNotification
  --  )

 ;-------------------------------------------------------------------------------------
  TEST #1e Make Out-of-Service = FALSE

  DEPENDENCIES None

  -- Step #10: Return point to service (make Out-of-Service = FALSE)

   SEND (
      Da = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, OBJECT1
      Property = 1, Out-of-Service
      OpenTag 3
         BOOLEAN = FALSE        ; Make Out-of-Service = FALSE
      CloseTag 3
      Unsigned = 4, WRITE_PRIORITY  ; Set Out-of-Service write priority
    )

    EXPECT (
      Sa = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )