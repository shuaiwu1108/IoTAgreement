;--------------------------------------------------------------
  ; Testing Support for CHANGE_OF_BITSTRING Test
  ;
  ; Exec_EventType_ChangeofBitstring.vts    evnt01mmddyy.vts
  ; 8.3.1
  ;   Ver 0.0   01/29/01    Anthony Makela
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;       - uncomment sections for intrinsic reporting.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------


SETUP ChangeofBitstring
INCLUDE "..\config.vts"
  
  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2000            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = ANALOG-VALUE, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = ANALOG-VALUE, 2   -- a second monitored object.
  ANALOG_ID = ANALOG_VARIABLE, 1        -- a third monitored object. 
  MONITORED_PROP = status-flags        -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 90                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object
  NORMAL_LIMIT = 50

  NOTIFICATION_CLASS = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated

  NOTIFY_TYPE = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"

  BITSTRING_FALSE = FALSE
  BITSTRINF_TRUE = TRUE

  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.
  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here
  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_OUT_OF_RANGE = 5
  EVENT_TYPE_CHANGE_OF_BITSTRING = 0
  EVENT_TYPE_CHANGE_OF_STATE = 1

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 8.3.1 ChangeofBitstring Test

  TEST #8.3.1

  DEPENDENCIES ReadProperty Service Inititation Tests, 9.15;
  DEPENDENCIES WriteProperty Service Execution Tests, 9.19

;  REFERENCE (B) 12.10, 13.3.1, 13.7

  -- Purpose: This test case verifies the correct operation of the Change of
  -- Bitstring event algorithm. It applies to Event Enrollment objects with an
  -- Event_Type of CHANGE_OF_BITSTRING.
  --
  -- Test Concept: The object begins the test in a NORMAL state. The referenced
  -- property is changed to a value that is one of the values designated in
  -- List_Of_Bitstring_Values. After the time delay expires the object should
  -- enter the OFFNORMAL state and transmit an event notification message. The
  -- referenced property is then changed to a value corresponding to a NORMAL
  -- state. After the time delay the object should enter the NORMAL state and
  -- transmit an event notification message.
  --
  -- Configuration Requirements: The IUT shall be configured such that the 
  -- Event_Enable property has a value of TRUE for the TO-OFFNORMAL and
  -- TO-NORMAL transitions. The Issue_Confirmed_Notifications property shall
  -- have a value of TRUE. The event-generating objects shall be in a NORMAL
  -- state at the start of the test.

  -- 1. VERIFY Event_State = NORMAL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 2. IF (the referenced property is writable) THEN
  --         WRITE (referenced property) = (a value x such that x = one of the
  --                                        List_Of_Bitstring_Values after the
  --                                        bitmask is applied)
  --    ELSE
  --         MAKE (the referenced property have a value x such that x = one of 
  --               the List_Of_Bitstring_Values after the bitmask is applied)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        REAL = 1
    ;BITSTRING = BITSTRING_FALSE
      CloseTag 3
      )

    EXPECT(
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
      )

  -- 3. WAIT Time_Delay
  -- 4. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Event Enrollment object being 
  --                                         tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-OFFNORMAL transition),
  --            'Event Type' = CHANGE_OF_BITSTRING,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = NORMAL,
  --            'To State' = OFFNORMAL,
  --            'Event Values' = referenced-bitstring, Status_Flags

    Send (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, 3;TD_PROCESS_ID
      Object = 1, IUT_DEVICE_OBJECT
      Object = 2, EVENT_ID
      OpenTag 3
        ;OpenTag 0
          Time = 0,[*:*:*.*]
        ;CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_CHANGE_OF_BITSTRING
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_NORMAL
      ENUM = 11, EVENT_STATE_OFFNORMAL
      OpenTag 12
        -- Change of Bitstring
         OpenTag 0
           BITSTRING = 0, HI_LIMIT
           BITSTRING = 1, OFFNORMAL_STATUS_FLAGS
         CloseTag 0

      CloseTag 12
      )

  -- 5. TRANSMIT BACnet-SimpleAck-PDU

    ;SEND (
    EXPECT(
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedEventNotification
      )

  -- 6. VERIFY Status_Flags = (TRUE, FALSE, FALSE, FALSE)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = TFFF_STATUS_FLAGS
      CloseTag 3
      )

  -- 7. VERIFY Event_State = OFFNORMAL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_OFFNORMAL
      CloseTag 3
      )

  -- 8. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --        VERIFY Event_Time_Stamps = (the timestamp in step 4, *.*)

  -- 9. IF (Present-Value is writable) THEN
  --        WRITE (referenced property) = (a value x such that x corresponds
  --                                       to a normal state)
  --    ELSE
  --        MAKE (the referenced property have a value x such that x
  --              corresponds to a normal state)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        BITSTRING = BITSTRING_TRUE
      CloseTag 3
      )

  -- 10. WAIT Time_Delay

  -- 11. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Event Enrollment object being 
  --                                         tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = CHANGE_OF_BITSTRING,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = OFFNORMAL,
  --            'To State' = NORMAL,
  --            'Event Values' = referenced-bitstring, Status_Flags

    AND (
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, TD_PROCESS_ID
      Object = 1, IUT_DEVICE_OBJECT
      Object = 2, EVENT_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_CHANGE_OF_BITSTRING
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_OFFNORMAL
      ENUM = 11, EVENT_STATE_NORMAL
      OpenTag 12
        -- Change of Bitstring
        -- OpenTag 0
           BITSTRING = 0, NORMAL_LIMIT
           BITSTRING = 1, NORMAL_STATUS_FLAGS
        -- CloseTag 0

      CloseTag 12
      )

  -- 12. TRANSMIT BACnet-SimpleACK-PDU

    ;SEND (
    EXPECT(
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedEventNotification
      )

  -- 13. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = FALSE_STATUS_FLAGS
      CloseTag 3
      )

  -- 14. VERIFY Event_State = NORMAL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 15. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --        VERIFY Event_Time_Stamps = (the timestamp in step 4, *, the
  --                                    timestamp in step 11)

