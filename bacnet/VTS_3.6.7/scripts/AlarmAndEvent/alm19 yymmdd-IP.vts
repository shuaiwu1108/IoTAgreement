;--------------------------------------------------------------
  ; Testing Support for GetAlarmSummary Service Execution Tests
  ;
  ; Exec_AlarmSummary_None_One_Multiple_ActiveAlarms.vts    alm19mmddyy.vts
  ; 9.4.1 thru 9.4.3
  ;   Ver 0.0   02/07/01    Anthony Makela
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;       - Change the alarm list as necessary.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------


SETUP AlarmSummaries
INCLUDE "..\config.vts"
  
  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2007            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = BINARY-VALUE,1        ;MULTISTATE-INPUT, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = BINARY-VALUE,2   -- a second monitored object. 
  MONITORED_PROP = Present-Value        -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 90                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object

  NOTIFICATION_CLASS = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated

  NOTIFY_TYPE = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"


  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.
  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here
  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_OUT_OF_RANGE = 5

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 9.4.1 - 9.4.3 AlarmSummary Test

  TEST #9.4.1

  DEPENDENCIES None

;  REFERENCE (B) 13.8

  -- Purpose: This test case verifies that the IUT can execute the
  -- GetAlarmSummary service request when there are no active alarms to report.
  --
  -- Test Concept: Each test is based on a particular configuration of the IUT
  -- that should produce a known result when the alarm summary is requested.
  -- The means used to configure the starting state for each test is a local
  -- matter. There are no negative tests.
  --
  -- Configuration Requirements: The IUT shall be configured so that there 
  -- are no active alarms.

  -- 1. TRANSMIT GetAlarmSummary-Request

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetAlarmSummary
      )

  -- 2. RECEIVE GetAlarmSummary-ACK
  --      'List of Alarm Summaries' = (an empty list)

    EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = GetAlarmSummary
      )


  TEST #9.4.2

  -- Purpose: This test case verifies that the IUT can execute the
  -- GetAlarmSummary service request when there is exactly one active alarm
  -- to report.
  --
  -- Configuration Requirements: The IUT shall be configured so that there is
  -- exactly one active alarm.

  -- 1. TRANSMIT GetAlarmSummary-Request

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetAlarmSummary
      )

  -- 2. RECEIVE GetAlarmSummary-ACK,
  --      'List of Alarm Summaries' = (a list with exactly one entry
  --                                   corresponding to the known active alarm)

  -- CHANGE: Set the alarm type as required.

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = GetAlarmSummary
      Object = MONITORED_ID
      ENUM = EVENT_STATE_OFFNORMAL
      BITSTRING = T,F,F        ;T,T,T,T
      )


  TEST #9.4.3

  -- Purpose: This test case verifies that the IUT can execute the 
  -- GetAlarmSummary service request when there are multiple active alarms
  -- to report. This test case shall be executed only for devices that contain
  -- more then one object that can detect alarms.
  --
  -- Configuration Requirements: The IUT shall be configured so that there is 
  -- more then one active alarm.

  -- 1. TRANSMIT GetAlarmSummary-Request

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetAlarmSummary
      )

  -- 2. RECEIVE GetAlarmSummary-ACK
  --      'List of Alarm Summaries' = (a list containing one entry for each
  --                                   known active alarm)

  -- CHANGE: Set the alarm type as required.

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = GetAlarmSummary
      Object = MONITORED_ID2
      ENUM = EVENT_STATE_OFFNORMAL
      BITSTRING = T,F,F
      Object = MONITORED_ID
      ENUM = EVENT_STATE_OFFNORMAL
      BITSTRING = T,F,F
      )

