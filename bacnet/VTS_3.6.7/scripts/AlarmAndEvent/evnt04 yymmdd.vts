;--------------------------------------------------------------
  ; Testing Support for CHANGE_OF_VALUE Bitstring Test
  ;
  ; Exec_EventType_ChangeofValueBitstring.vts    evnt04mmddyy.vts
  ; 8.3.3.2
  ;   Ver 0.0   01/31/01    Anthony Makela
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------


SETUP ChangeofValueBitstring
INCLUDE "..\config.vts"
  
  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2000            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  Notify1 = Notification-Class,5 
  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = MULTISTATE-VALUE, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = MULTISTATE-VALUE, 2   -- a second monitored object.
  ANALOG_ID = ANALOG_VARIABLE, 1        -- a third monitored object. 
  MONITORED_PROP = Status_Flags         -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 13                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object
  NORMAL_LIMIT = 50

  REFERENCE_VALUE = 10
  REFERENCE_VALUE_AND_INCREMENT = 11
  REFERENCE_VALUE_EXCEEDS_INCREMENT = 15

  NOTIFICATION_CLASS1 = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated
  NOTIFY_TYPE1 = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"

  BITSTRING_FALSE = FALSE
  BITSTRING_TRUE = TRUE

  BITMASK = F,F,T,T
  BITMASK_VALUE_NONCHANGE = T,F,T,T
  BITMASK_VALUE_CHANGE = F,F,F,F

  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.
  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here
  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_CHANGE_OF_BITSTRING = 0
  EVENT_TYPE_CHANGE_OF_STATE = 1
  EVENT_TYPE_CHANGE_OF_VALUE = 2
  EVENT_TYPE_OUT_OF_RANGE = 5

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 8.3.3.2 ChangeofValue Bitstring Algorithm Test

   Test #1 Set-up the multistate-object
    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, number-of-states
      OpenTag 3
      Unsigned = 16 ;
      CloseTag 3
   )

    EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  TEST #2 Set up the Notification Class 1
  DEPENDENCIES References Notify 1 object
  REFERENCE (B) Notify Recipient List
    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, Notify1
      Property = 1, Recipient_list
      OpenTag 3
            BitString = t, t, t, t, t, t , t     -- mtwtf !ss
            TIME = [00:00:04]
            Time = [23:59:58.57]
            object = 0,TD_DEVICE_OBJECT  
            Unsigned = TD_PROCESS_ID               -- processIdentifier
            Bool = True                         -- issueConfirmedNotificatons
            BitString = t, f, t                 -- transitions BACnetEventTranswitionBits off, flt, normal

--            BitString = t, f, f, f, f, f, f     -- mtwtf !ss
--            TIME = [08:00:04]
--            Time = [17:00:00]
--            object = 0,WS_DEVICE
--            Unsigned = 4                        -- processIdentifier
--            Bool = True                         -- issueConfirmedNotificatons
--            BitString = t, f, f                 -- transitions BACnetEventTranswitionBits off, flt, normal
     CloseTag 3
   )

   EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
    )

  TEST #3 Setup Event-Enrollment-1 for command-failure
    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WritePropertyMultiple
      Object = 0, EVENT_ID 
      OpenTag 1
        Property = 0, Object-Name
        OpenTag 2
            CharString = "change-of-state event"
        CloseTag 2
        Property = 0, Description
        OpenTag 2
            CharString = ANSI, "Event Change_Of_State  w/o Delay"
        CloseTag 2
        -- Property = 0,Event_Type      Generated from Event_Parameters
        Property = 0, Notify_Type
        OpenTag 2
            Enum = 0        -- 0=alarm, 1=event, 2=ack-notify
        CloseTag 2
        Property = 0, Event_Parameters
      OpenTag 3      
      OpenTag 2
            Unsigned = 0,1
      OpenTag 1
            Object = 0,MONITORED_ID
        Property = 1, MONITORED_PROP
      CloseTag 1
      CloseTag 2
      CloseTag 3      
        Property = 0, Object_Property_Reference
        --- unsigned 1, arrayIndex
        OpenTag 2
             Object   = 0, MONITORED_ID 
             Property = 1, MONITORED_PROP 
             -- unsigned = 2, arrayIndex
             -- Object = 3, Device, 570001
        CloseTag 2
        --- unsigned 3, 16      priority
        -- Property = 0,Event_State
        -- Property = 0, Acked_Transitions ; only writable internally
        ;OpenTag 2
        ;    BitString = T, F, T    -- To: off, fault, normal
        ;CloseTag 2
        Property = 0, Event_Enable
        OpenTag 2
            BitString = T, F, T
        CloseTag 2
        Property = 0, Notification_Class
        OpenTag 2
            Unsigned = Notification_Class1
        CloseTag 2
        -- Property = 0, Event_Time_Stamps
       CloseTag 1
    )

   EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WritePropertyMultiple
    )

 TEST #8.3.3.2

  DEPENDENCIES ReadProperty Service Execution Tests, 9.15;
  DEPENDENCIES WriteProperty Service Execution Tests, 9.19

;  REFERENCE (B) 12.10, 13.3.1, 13.7

  -- Purpose: This test case verifies the correct operation of the
  -- CHANGE_OF_VALUE event algorithm as applied to bitstring datatypes.
  -- It applies to Event Enrollment objects with an Event_Type of
  -- CHANGE_OF_VALUE.
  --
  -- Test Concept: The object begins the test in a NORMAL state. The referenced
  -- property is changed by a new value such that none of the bits in then
  -- Bitmask are changed. The tester verifies that no event notification is
  -- transmitted. The referenced property is changed again to a value that 
  -- differs in one or more bits that are included in the Bitmask. The
  -- tester verifies that an event notification message is transmitted and that
  -- the proper Event_State transitions occur.
  --
  -- Configuration Requirements: The IUT shall be configured such that the
  -- Event_Enable property has a value of TRUE for the TO_NORMAL transition.
  -- The Issue_Confirmed_Notifications property shall have a value of TRUE.
  -- The Bitmask shall be configured so that at least one but not all bits of
  -- the referenced property are included in the mask. The event-generating
  -- object shall be in a NORMAL state at the start of the test.

  -- 1. VERIFY Event_State = NORMAL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 2. IF (the referenced property is writable) THEN
  --         WRITE (referenced property) = (a value x such that x differs from
  --                                        the initial value but only in bits
  --                                        that are not included in Bitmask)
  --    ELSE
  --         MAKE (the referenced property have a value x such that x differs 
  --               from the initial value but only in bits that are not included
  --               in Bitmask)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = BITMASK_VALUE_NONCHANGE
      CloseTag 3
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = SimpleAck
      Service = WriteProperty
      )

  -- 3. WAIT Time_Delay + Notification Fail Time

  -- 4. CHECK (verify that no event notification message is transmitted)

    EXPECT (
      SA = IUT_ADDR
      )

  -- 5. IF (the referenced property is writable) THEN
  --         WRITE (referenced property) = (a value x such that x differs from
  --                                        the initial value in one or more 
  --                                        bits included in Bitmask)
  --    ELSE
  --         MAKE (the referenced property have a value x such that x differs 
  --               from the initial value in one or more bits included in 
  --               Bitmask)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = WriteProperty
      Object = 0, MONITORED_ID
      Property = 1, MONITORED_PROP
      OpenTag 3
        UNSIGNED = BITMASK_VALUE_CHANGE
      CloseTag 3
      )

  -- 6. WAIT Time_Delay

  -- 7. BEFORE Notification Fail Time
  --        RECEIVE ConfirmedEventNotification-Request,
  --            'Process Identifier' = (any valid process ID),
  --            'Inititating Device Identifier' = IUT,
  --            'Event Object Identifier' = (the Event Enrollment object 
  --                                         being tested),
  --            'Time Stamp' = (the current local time),
  --            'Notification Class' = (the configured notification class),
  --            'Priority' = (the value configured to correspond to a 
  --                          TO-NORMAL transition),
  --            'Event Type' = CHANGE_OF_VALUE,
  --            'Notify Type' = ALARM|EVENT,
  --            'AckRequired' = TRUE|FALSE,
  --            'From State' = NORMAL,
  --            'To State' = NORMAL,
  --            'Event Values' = changed-Value, Status_Flags

    AND (
      PDU = Confirmed-Request
      Service = ConfirmedEventNotification
      INTEGER = 0, TD_PROCESS_ID
      Object = 1, IUT_DEVICE_OBJECT
      Object = 2, EVENT_ID
      OpenTag 3
        OpenTag 0
          Time = 0, XX
        CloseTag 0
      CloseTag 3
      INTEGER = 4, NOTIFICATION_CLASS
      INTEGER = 5, OFFNORMAL_PRIORITY
      ENUM = 6, EVENT_TYPE_CHANGE_OF_VALUE
      CHARSTRING = 7, HILIMIT_TEXT
      ENUM = 8, NOTIFY_TYPE
      BOOLEAN = 9, OFFNORMAL_ACK_REQUIRED
      ENUM = 10, EVENT_STATE_NORMAL
      ENUM = 11, EVENT_STATE_NORMAL
      OpenTag 12
        -- Change of value
        OpenTag 2
          OpenTag 0
            -- CHANGE: Choose datatype
            BITSTRING = 0, NEXT_NORMAL_VALUE
            -- REAL = 1, NEXT_NORMAL_VALUE
          CloseTag 0
          BITSTRING = 1, NEXT_NORMAL_STATUS_FLAGS
        CloseTag 2

      CloseTag 12
      )

  -- 8. TRANSMIT BACnet-SimpleAck-PDU

    SEND (
      DA = IUT_ADDR
      PDU = SimpleAck
      Service = ConfirmedEventNotification
      )

  -- 9. VERIFY Status_Flags = (FALSE, FALSE, FALSE, FALSE)

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, EVENT_ID
      Property = 1, Status-Flags
      OpenTag 3
        BITSTRING = FALSE_STATUS_FLAGS
      CloseTag 3
      )

  -- 10. VERIFY Event_State = NORMAL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      )

    EXPECT (
      SA = IUT_ADDR
      PDU = ComplexAck
      Service = ReadProperty
      Object = 0, MONITORED_ID
      Property = 1, Event-State
      OpenTag 3
        ENUM = EVENT_STATE_NORMAL
      CloseTag 3
      )

  -- 11. IF (Protocol_Version > 1 | Protocol_Revision >= 1) THEN
  --        VERIFY Event_Time_Stamps = (*, *, the timestamp in step 7)


