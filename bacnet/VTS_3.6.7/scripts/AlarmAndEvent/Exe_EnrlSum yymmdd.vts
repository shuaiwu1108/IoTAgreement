;--------------------------------------------------------------
  ; Testing Support for GetEnrollmentSummary Service Execution Tests
  ;  Exe_EnrlSummmddyy.vts
  ; Exec_EnrollmentSummaries_ZeroSummaries_ACKED_NOTACKED_ALL.vts
  ;
  ;   Ver 0.0   02/09/01    Anthony Makela
  ;
  ;  In the REFERENCE sections "(B)" refers to the BACnet standard and
  ;  "(T)" refers to the testing addendum.
  ;--------------------------------------------------------------
  ;--------------------------------------------------------------
  ;   INITIAL VALUES:
  ;       MONITORED_ID.MONITORED_PROP = NORMAL_VALUE
  ;       EVENT_ID.EventState = EVENT_STATE_NORMAL
  ;       if the object is required to be out-of-service for the 
  ;       monitored property to be changed, then it should be
  ;       out-of-service before the script is executed.
  ;
  ;   SCRIPT CHANGES REQUIRED:
  ;       - The MACROs in TD_CONFIG must be assigned values that
  ;       correctly reflect the setup of the VTS computer
  ;       - The MACROs in IUT_CONFIG must be assigned values that
  ;       accurately reflect the setup of the IUT device, the
  ;       event generating object, and monitored object.
  ;
  ;   SCRIPT LIMITATIONS:
  ;--------------------------------------------------------------


SETUP EnrollmentSummaries
INCLUDE "..\config.vts"
  
  ;--------------------------------------------------------------
  ;
  ; IUT_CONFIG
  ;
  TEST_YEAR   = 2000            -- the year the test is executed
  TEST_MONTH  = XX              -- the month the test is executed
  TEST_DAY    = XX              -- the day the test is executed

  EVENT_ID = EVENT-ENROLLMENT, 1        -- the event generating object E1
  EVENT_ID2 = EVENT-ENROLLMENT, 2       -- the event generating object E2
  MONITORED_ID = MULTISTATE-INPUT, 1    -- the monitored object, same as 
                                        -- above if intrinsic
  MONITORED_ID2 = MULTISTATE-INPUT, 2   -- a second monitored object. 
  MONITORED_PROP = Present-Value        -- the monitored property, 
                                        -- present-value if intrinsic

  EVENT_TYPE = EVENT_TYPE_OUT_OF_RANGE  -- the alg used by the IUT
  OFFNORMAL_STATE = EVENT_TYPE_HI_LIMIT -- the event state that will 
                                        -- be generated by an offnormal
                                        -- transition
                                        -- when testing COV or BUFFER_READY,
                                        -- this should be EVENT_STATE_NORMAL

  OFFNORMAL_VALUE = 1           -- a value that causes an OFFNORMAL 
                                -- transition - this needs to be of the correct
                                -- datatype
  NORMAL_VALUE = 50             -- a value that causes a NORMAL transition
  NEXT_NORMAL_VALUE = 10        -- set this to the second NORMAL value. This
                                -- must be different than NORMAL_VALUE
                                --  for COV and BUFFER_READY
  FAULT_VALUE = 5

  -- Floating Limit values
  FLOATING_LIMIT_LIMIT = 10             -- the error limit value
  SETPOINT_VALUE = 10                   -- the value of the floating setpoint
                                        -- (must be fixed to this value)

  -- Out Of Range values
  LOW_LIMIT = 10                        -- the LowLimit value in the event
                                        -- object
  HI_LIMIT = 90                         -- the HiLimit value in the event object
  DEADBAND = 3                          -- the Deadband value in the event
                                        -- object

  NOTIFICATION_CLASS = 5        -- the notification class used by the event
                                -- generating object

  NORMAL_PRIORITY = 170         -- the priority at which normal transitions will
                                -- be generated
  FAULT_PRIORITY = 100          -- the priority at which fault transitions will
                                -- be generated
  OFFNORMAL_PRIORITY = 90       -- the priority at which offnormal transitions
                                -- will be generated

  NOTIFY_TYPE = NOTIFY_TYPE_ALARM   -- the notify type of the event to be
                                    -- generated

  OFFNORMAL_ACK_REQUIRED = TRUE
  NORMAL_ACK_REQUIRED = FALSE
  FAULT_ACK_REQUIRED = TRUE     -- whether the FAULT transition will require 
                                -- an ACK

  HILIMIT_TEXT = ANSI,"OffNormal"    -- text for each type of transition
  LOLIMIT_TEXT = ANSI,"OffNormal"
  EXECUTION_TEXT = ANSI,"SimpleText"
  NORMAL_TEXT = ANSI,"Normal"
  FAULT_TEXT = ANSI,"Fault"


  -- status flags expected after each transition (order is
  -- alarm,fault,overridden,outofservice)
  -- for intrinsic alarming, the first bit must be set in the OFFNORMAL and
  -- FAULT ones and
  -- not set in the NORMAL case. for algorithmic, the first bit must never be
  -- set.
  OFFNORMAL_STATUS_FLAGS = F,F,F,T 
  NORMAL_STATUS_FLAGS = F,F,F,T
  FAULT_STATUS_FLAGS = F,T,F,T
  FALSE_STATUS_FLAGS = F,F,F,F
  TFFF_STATUS_FLAGS = T,F,F,F
  FTFF_STATUS_FLAGS = F,T,F,F

  TRANSITION_FLAGS_TRUE = T,T,T
  TRANSITION_FLAGS_FALSE = F,F,F
  TRANSITION_FLAGS_FTT = F,T,T
  TRANSITION_FLAGS_FTF = F,T,F

  -- if the IUT uses sequence number timestamps then the sequence numbers
  -- that will be returned by the IUT need to be entered here
  SEQUENCE_NO_1 = 1
  SEQUENCE_NO_2 = 2
  SEQUENCE_NO_3 = 3
  SEQUENCE_NO_4 = 4

  ;--------------------------------------------------------------
  ; BACnet enumerated values
  ;--------------------------------------------------------------

  EVENT_STATE_NORMAL = 0
  EVENT_STATE_FAULT = 1
  EVENT_STATE_OFFNORMAL = 2
  EVENT_STATE_HILIMIT = 3
  EVENT_STATE_LOLIMIT = 4

  EVENT_TYPE_OUT_OF_RANGE = 5

  NOTIFY_TYPE_ALARM = 0
  NOTIFY_TYPE_EVENT = 1
  NOTIFY_TYPE_ACK = 2

  ;--------------------------------------------------------------

  SECTION 9.5.1.1 - 9.5.1.4 EnrollmentSummary Test

  TEST #9.5.1.1

  DEPENDENCIES None

;  REFERENCE (B) 13.9

  -- Purpose: The test group is to verify the correct execution of the
  -- GetEnrollmentSummary service request under the circumstances where the
  -- service is expected to be successfully completed and only the required
  -- 'Acknowledgement Filter' is used.
  -- This test case verifies that the IUT can execute the GetEnrollmentSummary
  -- request when there are no enrollments to report.
  --
  -- Test Concept: This service has 6 filters that can be applied to the
  -- selection of the event enrollments. Of the 6 filters, only the 
  -- 'Acknowledgement Filter' is required. For each test case a particular
  -- configuration is required that will produce the expected result for the
  -- filters used. The test cases in 9.5.1 utilize only the required
  -- 'Acknowledgement Filter'. The IUT shall be configured for each of these
  -- test cases as described. The test cases in 9.5.2 utilize the optional
  -- filters. The intention is to configure the IUT with a rich database of
  -- event enrollments that have features appropriate to these filters. This
  -- may not be possible for some implementations. It is not necessary to
  -- support a configuration that provide event enrollments that match each of
  -- the filter criteria. However, it is a requirement that all of the tests be
  -- executed and a response returned that is appropriate based on the 
  -- configuration of the IUT's database. Returning an empty list of
  -- enrollments is appropriate if it is not possible to configure the IUT in
  -- such a way that the filter criteria can be met. There are no negative 
  -- tests.
  --
  -- Configuration Requirements: The IUT shall be configured with no enrollments
  -- to report.

  -- 1. TRANSMIT GetEnrollmentSummary-Request
  --      'Acknowledgement Filter' = ALL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      OpenTag 0
        ENUM = ALL
      CloseTag 0
      )

  -- 2. RECEIVE GetEnrollmentSummary-ACK
  --      'List of Alarm Summaries' = (an empty list)

    EXPECT (
      SA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      )


  TEST #9.5.1.2

  -- Purpose: This test case verifies that the IUT can execute the 
  -- GetEnrollmentSummary request when the Acknowledgement Filter is set to
  -- ACKED.
  --
  -- Configuration Requirements: The IUT shall be configured with at least
  -- two event enrollments, one for which all event transitions have been
  -- acknowledged, and one for which at least one event transition has not 
  -- been acknowledged.

  -- 1. TRANSMIT GetEnrollmentSummary-Request,
  --      'Acknowledgement Filter' = ACKED

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      OpenTag 0
        ENUM = ACKED
      CloseTag 0
      )

  -- 2. RECEIVE GetEnrollmentSummary-ACK,
  --      'List of Enrollment Summaries' = (all events for which the event 
  --                                        transitions have all been 
  --                                        acknowledged)

  -- CHANGE: The type of event to filter on.

    EXPECT (
      SA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      Object EVENT_ID
      ENUM EVENT_TYPE_OUT_OF_RANGE
      ENUM EVENT_STATE_NORMAL
      INTEGER OFFNORMAL_PRIORITY
      )


  TEST #9.5.1.3

  -- Purpose: This test case verifies that the IUT can execute
  -- GetEnrollmentSummary request when the Acknowledgement Filter is set to
  -- NOT_ACKED.
  --
  -- Configuration Requirements: The IUT shall be configured with at least
  -- two event enrollments, one for which all event transitions have been
  -- acknowledged, and one for which at least one event transition has not
  -- been acknowledged.

  -- 1. TRANSMIT GetEnrollmentSummary-Request,
  --      'Acknowledgment Filter' = NOT-ACKED

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      OpenTag 0
        ENUM = NOT-ACKED
      CloseTag 0
      )

  -- 2. RECEIVE GetEnrollmentSummary-ACK,
  --      'List of Enrollment Summaries' = (all events for which there is at
  --                                        least one unacknowledged event
  --                                        transition)

  -- CHANGE: The type of event to filter on.

    EXPECT (
      SA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      Object EVENT_ID
      ENUM EVENT_TYPE_OUT_OF_RANGE
      ENUM EVENT_STATE_OFFNORMAL
      INTEGER OFFNORMAL_PRIORITY
      )


  TEST #9.5.1.4

  -- Purpose: This test verifies that the IUT can execute the 
  -- GetEnrollmentSummary request when the filter request in the
  -- Acknowledgement Filter is set to ALL.
  --
  -- Configuration Requirements: The IUT shall be configured with at least
  -- two event enrollments, one for which all event transitions have been
  -- acknowledged, and one for which at least one event transition has not
  -- been acknowledged.

  -- 1. TRANSMIT GetEnrollmentSummary-Request,
  --      'Acknowledgement Filter' = ALL

    SEND (
      DA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      OpenTag 0
        ENUM = ALL
      CloseTag 0 
      )

  -- 2. RECEIVE GetEnrollmentSummary-ACK,
  --       'List of Enrollment Summaries' = (the union of the summaries provided
  --                                         in 9.5.1.2 and 9.5.1.3)

    EXPECT (
      SA = IUT_ADDR
      PDU = Confirmed-Request
      Service = GetEnrollmentSummary
      Object EVENT_ID
      ENUM EVENT_TYPE_OUT_OF_RANGE
      ENUM EVENT_STATE_NORMAL
      INTEGER OFFNORMAL_PRIORITY
      Object EVENT_ID
      ENUM EVENT_TYPE_OUT_OF_RANGE
      ENUM EVENT_STATE_OFFNORMAL
      INTEGER OFFNORMAL_PRIORITY
      )
